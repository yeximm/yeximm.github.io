<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux部署web程序在后台运行</title>
      <link href="article/fff.html"/>
      <url>article/fff.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux部署web程序在后台运行"><a href="#Linux部署web程序在后台运行" class="headerlink" title="Linux部署web程序在后台运行"></a>Linux部署web程序在后台运行</h1><p>通过flask、django、torando等web框架部署web应用时，一般都是在终端上运行python+主程序来实现，但是关闭终端后程序也会被kill，最近重新部署了tornado网站，实现了shell脚本控制程序启动，下面记录过程。</p><p>tornado的启动方式与flask或django差不多，不太懂的可以先上手一个测试一下。</p><blockquote><p>注意：</p><ol><li>本文主要运行文件为server_worden.py程序。</li><li>为了区别不同的运行进程，需要将主要运行的程序文件名称做出区别！！</li><li>修改以下三个文件中的<code>server_worden</code>，改为项目所需文件即可。</li></ol></blockquote><h1 id="编写启动程序的shell脚本"><a href="#编写启动程序的shell脚本" class="headerlink" title="编写启动程序的shell脚本"></a>编写启动程序的shell脚本</h1><p>能看到这里的相信你已经把web项目能够初步实现了，一般都是在虚拟环境中启动，这样能更好的控制程序使用的包文件。</p><p>首先在项目目录中创建一个shell文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo touch start</span><br></pre></td></tr></table></figure><p><code>start</code>文件的内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">echo &quot;进入程序目录&quot;</span><br><span class="line">cd &#x2F;home&#x2F;worden-tornado&#x2F;</span><br><span class="line">echo &quot;启动虚拟环境venv...&quot;</span><br><span class="line">source .&#x2F;venv&#x2F;bin&#x2F;activate</span><br><span class="line">echo &quot;执行程序...&quot;</span><br><span class="line">python server_worden.py &amp;</span><br><span class="line">echo &quot;程序启动中...&quot;</span><br></pre></td></tr></table></figure><p>保存即可，不想加echo的可以删掉。</p><h1 id="编写关闭程序的脚本"><a href="#编写关闭程序的脚本" class="headerlink" title="编写关闭程序的脚本"></a>编写关闭程序的脚本</h1><p>同样是shell文件，创建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo touch stop</span><br></pre></td></tr></table></figure><p>stop文件中内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">echo &quot;关闭worden程序中...&quot;</span><br><span class="line"></span><br><span class="line">pid&#x3D;&#96;ps -ef | grep python | grep server_worden.py | awk &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">if [ -n &quot;$pid&quot; ]</span><br><span class="line">then</span><br><span class="line">        echo &quot;关闭worden程序，pid: $pid&quot;</span><br><span class="line">        kill -9 $pid</span><br><span class="line">fi</span><br><span class="line">echo &quot;程序已关闭&quot;</span><br></pre></td></tr></table></figure><p>因为python程序已经通过无窗口启动，所以关闭程序只能通过kill进程来实现，上边pid代表的内容为启动的python程序所绑定的。</p><h1 id="编写重启程序脚本"><a href="#编写重启程序脚本" class="headerlink" title="编写重启程序脚本"></a>编写重启程序脚本</h1><p>先创建文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo touch reload</span><br></pre></td></tr></table></figure><p>reload文件内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">echo &quot;关闭worden程序中...&quot;</span><br><span class="line"></span><br><span class="line">pid&#x3D;&#96;ps -ef | grep python | grep server_worden.py | awk &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">if [ -n &quot;$pid&quot; ]</span><br><span class="line">then</span><br><span class="line">        echo &quot;关闭worden程序，pid: $pid&quot;</span><br><span class="line">        kill -9 $pid</span><br><span class="line">fi</span><br><span class="line">echo &quot;程序已关闭&quot;</span><br><span class="line"></span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">echo &quot;进入程序目录&quot;</span><br><span class="line">cd &#x2F;home&#x2F;worden-tornado&#x2F;</span><br><span class="line">echo &quot;启动虚拟环境venv...&quot;</span><br><span class="line">source .&#x2F;venv&#x2F;bin&#x2F;activate</span><br><span class="line">echo &quot;执行程序...&quot;</span><br><span class="line">python server_worden.py &amp;</span><br><span class="line">echo &quot;worden程序已运行&quot;</span><br></pre></td></tr></table></figure><p>就是把启动和关闭的代码按顺序写好。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu、Debain通过apt安装python3的pip3</title>
      <link href="article/d4ee.html"/>
      <url>article/d4ee.html</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu、Debain通过apt安装python3的pip3"><a href="#Ubuntu、Debain通过apt安装python3的pip3" class="headerlink" title="Ubuntu、Debain通过apt安装python3的pip3"></a>Ubuntu、Debain通过apt安装python3的pip3</h1><p>新版本的Ubuntu和Debain中自带了python3，但是没有安装python3的pip管理器，记录以下处理方法。</p><h1 id="查看是否有python2的pip"><a href="#查看是否有python2的pip" class="headerlink" title="查看是否有python2的pip"></a>查看是否有python2的pip</h1><p>在终端中输入以下命令，如果有安装其他版本的pip，则会直接显示，否则会提示没有找到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip -v</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip2 -v</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 -v</span><br></pre></td></tr></table></figure><h1 id="查看已有的pip版本"><a href="#查看已有的pip版本" class="headerlink" title="查看已有的pip版本"></a>查看已有的pip版本</h1><p>正常情况下刚安装的系统中是没有pip管理器的，如果输入上方代码运行后有结果，可以输入下面命令查看是哪个python版本的pip。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip( &#x2F;2&#x2F;3) --version</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 --version</span><br><span class="line">pip 20.0.2 from &#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;pip (python 3.8)</span><br></pre></td></tr></table></figure><h1 id="安装系统自带python3的pip"><a href="#安装系统自带python3的pip" class="headerlink" title="安装系统自带python3的pip"></a>安装系统自带python3的pip</h1><p>因为系统中可直接使用的python版本为3.8，所以直接运行python3的pip安装命令即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-pip</span><br></pre></td></tr></table></figure><p>安装完后运行<code>pip3 --version</code>即可查看安装的pip版本以及属于哪个python版本。</p><p>之后安装虚拟环境进行部署项目就很方便了。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python3 </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Debain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记hexo升级至5.0+的坑</title>
      <link href="article/e3a1.html"/>
      <url>article/e3a1.html</url>
      
        <content type="html"><![CDATA[<h1 id="记hexo升级至5-0-的坑"><a href="#记hexo升级至5-0-的坑" class="headerlink" title="记hexo升级至5.0+的坑"></a>记hexo升级至5.0+的坑</h1><p>弄了一整天，总算搞明白hexo是如何升级到5.0+版本了。</p><p>相信能看到这里的小伙伴已经安装好了Node.js 和Git两种工具了。</p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>如果要查看hexo的版本，请先建立一个空目录，执行<code>hexo init</code>命令，运行完毕后在终端输入<code>hexo -v</code>来查看hexo版本，否则你只能看到以下内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ hexo -v</span><br><span class="line">hexo-cli: 4.2.0</span><br><span class="line">os: Linux 5.4.0-62-generic linux x64</span><br><span class="line">node: 12.18.3</span><br><span class="line">v8: 7.8.279.23-node.39</span><br><span class="line">uv: 1.38.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.7</span><br><span class="line">ares: 1.16.0</span><br><span class="line">modules: 72</span><br><span class="line">nghttp2: 1.41.0</span><br><span class="line">napi: 6</span><br><span class="line">llhttp: 2.0.4</span><br><span class="line">http_parser: 2.9.3</span><br><span class="line">openssl: 1.1.1g</span><br><span class="line">cldr: 37.0</span><br><span class="line">icu: 67.1</span><br><span class="line">tz: 2019c</span><br><span class="line">unicode: 13.0</span><br></pre></td></tr></table></figure><h1 id="下载hexo最新版"><a href="#下载hexo最新版" class="headerlink" title="下载hexo最新版"></a>下载hexo最新版</h1><p>如果<code>hexo init</code>时网速太慢，可以直接从github上下载下来，地址：<a href="https://github.com/hexojs/hexo/releases"><strong>https://github.com/hexojs/hexo/releases</strong></a></p><p>两种压缩包内容一样，tar.gz结尾的是Linux系统上用的压缩方式。</p><p>hexo项目地址：<a href="https://github.com/hexojs"><strong>https://github.com/hexojs</strong></a></p><p>如果releases无法查看，可以前往hexo项目地址查看。</p><h1 id="配置hexo"><a href="#配置hexo" class="headerlink" title="配置hexo"></a>配置hexo</h1><p>使用<code>hexo init</code>方法下载的hexo环境请忽略以下内容。</p><p>将下载的内容解压并复制到目标文件夹下，注意是将与名称为<code>_config.yml</code>的同级目录中的多个文件复制到目标文件夹下。</p><p>然后打开终端，输入<code>hexo -v</code>，这时会提示</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo -v</span><br><span class="line">ERROR Cannot find module &#x27;hexo&#x27; from &#x27;/home/allen/桌面/11&#x27;</span><br><span class="line">ERROR Local hexo loading failed in ~/桌面/11</span><br><span class="line">ERROR Try running: &#x27;rm -rf node_modules &amp;&amp; npm install --force&#x27;</span><br></pre></td></tr></table></figure><p>按照提示运行：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf node_modules &amp;&amp; npm install --force</span><br></pre></td></tr></table></figure><p>运行完成后，再次输入<code>hexo -v</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ hexo -v</span><br><span class="line">INFO  Validating config</span><br><span class="line">hexo: 5.3.0</span><br><span class="line">hexo-cli: 4.2.0</span><br><span class="line">os: Linux 5.4.0-62-generic linux x64</span><br><span class="line">node: 12.18.3</span><br><span class="line">v8: 7.8.279.23-node.39</span><br><span class="line">uv: 1.38.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.7</span><br><span class="line">ares: 1.16.0</span><br><span class="line">modules: 72</span><br><span class="line">nghttp2: 1.41.0</span><br><span class="line">napi: 6</span><br><span class="line">llhttp: 2.0.4</span><br><span class="line">http_parser: 2.9.3</span><br><span class="line">openssl: 1.1.1g</span><br><span class="line">cldr: 37.0</span><br><span class="line">icu: 67.1</span><br><span class="line">tz: 2019c</span><br><span class="line">unicode: 13.0</span><br></pre></td></tr></table></figure><p>hexo最新版本就已经安装成功了，接下来部署你的网站即可。</p>]]></content>
      
      
      <categories>
          
          <category> 网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos中DNS服务器Dnsmasq的搭建与配置</title>
      <link href="article/b77d.html"/>
      <url>article/b77d.html</url>
      
        <content type="html"><![CDATA[<h1 id="DNS服务器Dnsmasq搭建与配置"><a href="#DNS服务器Dnsmasq搭建与配置" class="headerlink" title="DNS服务器Dnsmasq搭建与配置"></a>DNS服务器Dnsmasq搭建与配置</h1><p>Dnsmasq属于轻量级的DNS服务器，适合小范围群体使用，设置相对简单，方便内网服务与公网服务的不同场景访问。</p><h1 id="Dnsmasq安装"><a href="#Dnsmasq安装" class="headerlink" title="Dnsmasq安装"></a>Dnsmasq安装</h1><p>执行以下命令在VPS上安装Dnsmasq：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install dnsmasq</span><br></pre></td></tr></table></figure><h1 id="简单修改配置文件"><a href="#简单修改配置文件" class="headerlink" title="简单修改配置文件"></a>简单修改配置文件</h1><p>Dnsmasq的配置文件是放在 /etc/dnsmasq.conf 中。</p><p>修改前先进行备份以防不测！（不想备份就忽略这步）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp &#x2F;etc&#x2F;dnsmasq.conf &#x2F;etc&#x2F;dnsmasq.conf.bak</span><br></pre></td></tr></table></figure><p>修改配置文件<code>/etc/dnsmasq.conf</code>。</p><h2 id="设置上游DNS服务器"><a href="#设置上游DNS服务器" class="headerlink" title="设置上游DNS服务器"></a>设置上游DNS服务器</h2><p>打开<code>/etc/dnsmasq.conf</code>，设置参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resolv-file&#x3D;&#x2F;etc&#x2F;resolv.dnsmasq.conf</span><br></pre></td></tr></table></figure><p>同时取消 strict-order 前面的注册#号。</p><h2 id="设置本地DNS缓存"><a href="#设置本地DNS缓存" class="headerlink" title="设置本地DNS缓存"></a>设置本地DNS缓存</h2><p>检查一下配置文件中<code>no-hosts</code>参数前面是不是已经有了#号，默认的情况下是有的。</p><p>dnsmasq 会首先寻找本地的 hosts 文件再去寻找缓存下来的域名, 最后去上游DNS 服务器寻找。</p><h2 id="设置使用该DNS服务器的电脑"><a href="#设置使用该DNS服务器的电脑" class="headerlink" title="设置使用该DNS服务器的电脑"></a>设置使用该DNS服务器的电脑</h2><p>设置这个 dnsmasq 本机自己使用有效时：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen-address&#x3D;127.0.0.1</span><br></pre></td></tr></table></figure><p>如果想让本机所在的局域网的其它电脑也能够使用上dnsmasq时，把本机的局域网IP加上去，用半角逗号分隔：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen-address&#x3D;192.168.1.123,127.0.0.1</span><br></pre></td></tr></table></figure><p>如果想允许<strong>所有的用户</strong>使用你的DNS解析服务器，保持<code>listen-address</code>前的#不变即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#listen-address</span><br></pre></td></tr></table></figure><h1 id="启动服务并设置开机启动"><a href="#启动服务并设置开机启动" class="headerlink" title="启动服务并设置开机启动"></a>启动服务并设置开机启动</h1><h2 id="dnsmasq启动与自启命令"><a href="#dnsmasq启动与自启命令" class="headerlink" title="dnsmasq启动与自启命令"></a>dnsmasq启动与自启命令</h2><p>启动服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start dnsmasq.service</span><br></pre></td></tr></table></figure><p>设置开机自启：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable dnsmasq.service</span><br></pre></td></tr></table></figure><p>重启服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart dnsmasq.service</span><br></pre></td></tr></table></figure><p>查看服务是否开机启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl is-enabled dnsmasq.service</span><br></pre></td></tr></table></figure><p>设置开机禁用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable dnsmasq.service</span><br></pre></td></tr></table></figure><p>关闭服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop dnsmasq.service</span><br></pre></td></tr></table></figure><h2 id="检查dnsmasq是否正常启动"><a href="#检查dnsmasq是否正常启动" class="headerlink" title="检查dnsmasq是否正常启动"></a>检查dnsmasq是否正常启动</h2><p>执行以下命令查看dnsmasq是否正常启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tunlp|grep 53</span><br></pre></td></tr></table></figure><h1 id="添加DNS解析示例"><a href="#添加DNS解析示例" class="headerlink" title="添加DNS解析示例"></a>添加DNS解析示例</h1><ul><li>添加指定泛域名通过指定DNS服务器解析(防域名被劫持，或者转发指定域名解析)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#增加配置 &#x2F;etc&#x2F;dnsmasp.conf</span><br><span class="line">server&#x3D;&#x2F;sohu.com&#x2F;10.1.1.1</span><br></pre></td></tr></table></figure><ul><li>添加指定泛域名解析成指定IP （可用来屏蔽特定的域名）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#增加配置 &#x2F;etc&#x2F;dnsmasp.conf</span><br><span class="line">address&#x3D;&#x2F;baidu.com&#x2F;2.2.2.2</span><br></pre></td></tr></table></figure><ul><li>添加A记录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#增加配置 &#x2F;etc&#x2F;dnsmasp.conf</span><br><span class="line">host-record&#x3D;test13.test,10.10.10.13</span><br></pre></td></tr></table></figure><ul><li>添加别名记录（需要先添加源地址解析记录，在添加别名记录）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#增加配置 &#x2F;data&#x2F;dnsmasq&#x2F;dnsmasq.d&#x2F;test.test</span><br><span class="line">10.10.10.20 20.test.test</span><br><span class="line">#增加配置 &#x2F;etc&#x2F;dnsmasp.conf</span><br><span class="line">cname&#x3D;10.test.test,20.test.test</span><br></pre></td></tr></table></figure><h1 id="配置文件示例"><a href="#配置文件示例" class="headerlink" title="配置文件示例"></a>配置文件示例</h1><p>以下命令默认都用#注释的，使用哪条删除#再修改参数即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">##侦听端口</span><br><span class="line">port&#x3D;53</span><br><span class="line"></span><br><span class="line">##服务启动用户及用户组</span><br><span class="line">user&#x3D;nobody</span><br><span class="line">group&#x3D;nobody</span><br><span class="line"></span><br><span class="line">##业务侦听地址 - interface 选项和 listen-address 选项可以同时使用</span><br><span class="line">listen-address&#x3D;10.10.10.10,127.0.0.1</span><br><span class="line"></span><br><span class="line">##不加载本地的 &#x2F;etc&#x2F;hosts 文件</span><br><span class="line">no-hosts</span><br><span class="line"></span><br><span class="line">##添加读取额外的 hosts 文件路径，可以多次指定。如果指定为目录，则读取目录中的所有文件。</span><br><span class="line">addn-hosts&#x3D;&#x2F;data&#x2F;dnsmasq&#x2F;dnsmasq.hosts</span><br><span class="line"></span><br><span class="line">##读取目录中的所有文件，文件更新将自动读取</span><br><span class="line">hostsdir&#x3D;&#x2F;data&#x2F;dnsmasq&#x2F;dnsmasq.d</span><br><span class="line"></span><br><span class="line">##记录dns查询日志，如果指定 log-queries&#x3D;extra 那么在每行开始处都有额外的日志信息。</span><br><span class="line">log-queries</span><br><span class="line"></span><br><span class="line">##设置日志记录器</span><br><span class="line">log-facility&#x3D;&#x2F;data&#x2F;dnsmasq&#x2F;log&#x2F;dnsmasq.log</span><br><span class="line"></span><br><span class="line">##异步log，缓解阻塞，提高性能。默认为5，最大100。</span><br><span class="line">log-async&#x3D;50</span><br><span class="line"></span><br><span class="line">##指定 EDNS.0 UDP 包的最大尺寸，默认为 RFC5625 推荐的 edns-packet-max&#x3D;4096</span><br><span class="line">edns-packet-max&#x3D;4096</span><br><span class="line"></span><br><span class="line">##指定接口</span><br><span class="line">interface&#x3D;ens33</span><br><span class="line"></span><br><span class="line">##指定不提供 DHCP 或 TFTP 服务的接口，仅提供 DNS 服务。</span><br><span class="line">no-dhcp-interface&#x3D;ens33</span><br><span class="line"></span><br><span class="line">##指定 resolv-file 文件路径（上游DNS服务器），默认&#x2F;etc&#x2F;resolv.dnsmasq</span><br><span class="line">resolv-file&#x3D;&#x2F;data&#x2F;dnsmasq&#x2F;resolv.dnsmasq</span><br><span class="line"></span><br><span class="line">##严格按照resolv.conf中的顺序进行查找</span><br><span class="line">strict-order</span><br><span class="line"></span><br><span class="line">##重启后清空缓存</span><br><span class="line">clear-on-reload</span><br><span class="line"></span><br><span class="line">##完整的域名才向上游服务器查找，如果仅仅是主机名仅查找hosts文件</span><br><span class="line">domain-needed</span><br><span class="line"></span><br><span class="line">##缓存条数，默认为150条，cache-size&#x3D;0 禁用缓存。</span><br><span class="line">cache-size&#x3D;1000</span><br><span class="line"></span><br><span class="line">##不缓存未知域名缓存，默认情况下dnsmasq缓存未知域名并直接返回为客户端。</span><br><span class="line">no-negcache</span><br><span class="line"></span><br><span class="line">##指定DNS同属查询转发数量</span><br><span class="line">dns-forward-max&#x3D;1000</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos </tag>
            
            <tag> DNS服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu环境下安装Nodejs14.8.0</title>
      <link href="article/20c8.html"/>
      <url>article/20c8.html</url>
      
        <content type="html"><![CDATA[<h1 id="在Ubuntu上通过二进制存档安装Node-js"><a href="#在Ubuntu上通过二进制存档安装Node-js" class="headerlink" title="在Ubuntu上通过二进制存档安装Node.js"></a>在Ubuntu上通过二进制存档安装Node.js</h1><p>重做了一下系统后恢复hexo时忘了nodejs是咋装的了，花了点时间重新复盘了一下，下次再遇到这种情况就不怕耗时间了。</p><p>明确一下使用环境：</p><p>重装的Ubuntu系统，只创建了一个用户使用，不考虑其他用户使用。</p><h1 id="下载二进制包文件"><a href="#下载二进制包文件" class="headerlink" title="下载二进制包文件"></a>下载二进制包文件</h1><p>首先进入<a href="http://nodejs.cn/download/">nodejs官网下载页面</a>。</p><p><img src= "/img/loading.gif" data-lazy-src="20c8/1.png"></p><p>选择**Linux 二进制文件 (x64)**下载即可。</p><h1 id="建立安装目录"><a href="#建立安装目录" class="headerlink" title="建立安装目录"></a>建立安装目录</h1><p>在主目录下创建nodejs安装的路径，我是直接建的，有需要的话可以挪到你想要的地方，但是一定要在你的用户文件夹下进行操作！！！</p><p><img src= "/img/loading.gif" data-lazy-src="20c8/2.png"></p><h1 id="解压安装"><a href="#解压安装" class="headerlink" title="解压安装"></a>解压安装</h1><p>说是解压安装，实际上解压完事就能直接用了，这里还是要说一下，怕忘了。</p><p>打开终端，定位到你nodejs安装包的位置，执行以下命令进行解压：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xJvf node-v14.8.0-linux-x64.tar.xz -C ~&#x2F;nodejs</span><br></pre></td></tr></table></figure><p>可能下载的包不一定一样，根据需求改动即可，解压完事儿后创建一个自己用的软链就行了。</p><h1 id="添加环境变量（制作软链）"><a href="#添加环境变量（制作软链）" class="headerlink" title="添加环境变量（制作软链）"></a>添加环境变量（制作软链）</h1><p>打开用户的环境变量文件<code>~/.profile</code>，在末尾处添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## Nodejs</span><br><span class="line">export PATH&#x3D;~&#x2F;nodejs&#x2F;node-v14.8.0-linux-x64&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure><p>记得保存。</p><h1 id="刷新环境变量"><a href="#刷新环境变量" class="headerlink" title="刷新环境变量"></a>刷新环境变量</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. ~&#x2F;.profile</span><br></pre></td></tr></table></figure><p>没重启前记得刷新了才能用，重启后一切正常。</p><h1 id="测试安装成果"><a href="#测试安装成果" class="headerlink" title="测试安装成果"></a>测试安装成果</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">v14.8.0</span><br><span class="line">$ npm version</span><br><span class="line">&#123;</span><br><span class="line">  npm: &#39;6.14.7&#39;,</span><br><span class="line">  ares: &#39;1.16.0&#39;,</span><br><span class="line">  brotli: &#39;1.0.7&#39;,</span><br><span class="line">  cldr: &#39;37.0&#39;,</span><br><span class="line">  icu: &#39;67.1&#39;,</span><br><span class="line">  llhttp: &#39;2.0.4&#39;,</span><br><span class="line">  modules: &#39;83&#39;,</span><br><span class="line">  napi: &#39;6&#39;,</span><br><span class="line">  nghttp2: &#39;1.41.0&#39;,</span><br><span class="line">  node: &#39;14.8.0&#39;,</span><br><span class="line">  openssl: &#39;1.1.1g&#39;,</span><br><span class="line">  tz: &#39;2020a&#39;,</span><br><span class="line">  unicode: &#39;13.0&#39;,</span><br><span class="line">  uv: &#39;1.38.1&#39;,</span><br><span class="line">  v8: &#39;8.4.371.19-node.12&#39;,</span><br><span class="line">  zlib: &#39;1.2.11&#39;</span><br><span class="line">&#125;</span><br><span class="line">$ npx -v</span><br><span class="line">6.14.7</span><br></pre></td></tr></table></figure><p>完工！</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 批量导出项目所依赖的所有库文件及安装</title>
      <link href="article/d31c.html"/>
      <url>article/d31c.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在Python中我们在项目中会用到各种库，自带的自然不必再说，然而如果是三方库，则在进行项目移植时通常需要在新的环境下安装需要的三方库文件，面对较大项目中众多的三方库，可以先将项目依赖库导出到txt文件中。</p><h1 id="导出命令"><a href="#导出命令" class="headerlink" title="导出命令"></a>导出命令</h1><p>在命令行终端输入以下命令即可导出所有安装的库，若项目处于虚拟环境中，先进入虚拟环境后再运行以下命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; filename.txt</span><br></pre></td></tr></table></figure><p>其中filename可以自己定义</p><h1 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h1><p>在新环境下安装移植项目依赖的三方库，在命令行终端运行以下命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r filename.txt</span><br></pre></td></tr></table></figure><p>在其他情况下，我们也可以先将所有要安装的库列在txt文件中，然后再执行<code>pip install -r filename.txt</code>的方式去批量安装。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows命令行实现端口转发</title>
      <link href="article/15b7.html"/>
      <url>article/15b7.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在实际应用中，当需要使用内网服务器的程序，而由于业务需要无法将该内网服务器布置在公网上时，但是需要通过公网来进行访问，比较常用的是内网穿透，但是系统的端口转发可能更方便一些。</p><p>现在通过Windows系统模拟进行端口转发。</p><h1 id="环境模拟"><a href="#环境模拟" class="headerlink" title="环境模拟"></a>环境模拟</h1><p>现在有两台服务器，一台服务器A（内网：192.168.5.2）连接在公网上，外网可以访问，一台服务器B（内网：192.168.5.10）没有连接公网，外网无法访问，而且是程序运行的服务器。</p><h1 id="配置要求"><a href="#配置要求" class="headerlink" title="配置要求"></a>配置要求</h1><p>现在将连接公网的服务器A进行端口转发，服务器A的8000端口转发服务器的8080端口。</p><h1 id="进行配置"><a href="#进行配置" class="headerlink" title="进行配置"></a>进行配置</h1><h2 id="打开服务器A的cmd终端"><a href="#打开服务器A的cmd终端" class="headerlink" title="打开服务器A的cmd终端"></a>打开服务器A的cmd终端</h2><p>进入服务器A后按快捷键 win + R ，弹出的运行框中输入<code>cmd</code>后按回车。</p><h2 id="进行转发设置"><a href="#进行转发设置" class="headerlink" title="进行转发设置"></a>进行转发设置</h2><p>在命令窗口中输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface portproxy add v4tov4 listenaddress&#x3D;192.168.5.2 listenport&#x3D;8000 connectaddress&#x3D;192.168.5.10 connectport&#x3D;8080</span><br></pre></td></tr></table></figure><p>该命令将公网服务器A（192.168.5.2）的端口8000转发至内网服务器B（192.168.5.10）的端口8080。</p><p>listenaddress（监听地址）可以使用<code>0.0.0.0</code>，表示所有ip。</p><h2 id="检查是否成功"><a href="#检查是否成功" class="headerlink" title="检查是否成功"></a>检查是否成功</h2><p>在命令窗口中输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface portproxy show all</span><br></pre></td></tr></table></figure><p>出现以下命令即端口转发成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">侦听 ipv4:                 连接到 ipv4:</span><br><span class="line"></span><br><span class="line">地址            端口        地址            端口</span><br><span class="line"></span><br><span class="line">--------------- ----------  --------------- ----------</span><br><span class="line"></span><br><span class="line">192.168.5.2   8000       192.168.5.10       8080</span><br></pre></td></tr></table></figure><h2 id="删除转发规则"><a href="#删除转发规则" class="headerlink" title="删除转发规则"></a>删除转发规则</h2><p>在命令窗口中输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface portproxy delete v4tov4 listenaddress&#x3D;192.168.5.2 listenport&#x3D;8000</span><br></pre></td></tr></table></figure><p>删除后，用<code>netsh interface portproxy show all</code>命令进行查看，如果前面设置的转发端口不在了，说明删除成功。</p><h2 id="重启端口转发策略"><a href="#重启端口转发策略" class="headerlink" title="重启端口转发策略"></a>重启端口转发策略</h2><p>在命令窗口中输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface portproxy reset</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 端口转发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python创建与应用虚拟环境并切换第三方镜像源</title>
      <link href="article/a5f2.html"/>
      <url>article/a5f2.html</url>
      
        <content type="html"><![CDATA[<h1 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h1><p>顾名思义，虚拟环境就是虚拟出来的一个隔离的Python环境，每个项目都可以有自己的虚拟环境，用pip安装各自的第三方包，不同项目之间也不会存在冲突。</p><p>通过在系统中使用虚拟环境来实现隔离项目，这样每个项目之间所使用的库互不干扰，使项目结构清晰。</p><p>容易上手操作的就属Virtualenv了，python2和python3都支持，下面开始动手。</p><h2 id="安装Virtualenv"><a href="#安装Virtualenv" class="headerlink" title="安装Virtualenv"></a>安装Virtualenv</h2><p>使用Virtualenv库操纵虚拟环境前先进行安装，直接使用pip安装即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv</span><br></pre></td></tr></table></figure><h2 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h2><p>创建虚拟环境前先进入目标目录，进入目标目录后开始创建。</p><ol><li><p>简单命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv venv</span><br></pre></td></tr></table></figure><p><code>venv</code>：虚拟环境名称</p></li><li><p>详细命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv -p &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;python3 venv</span><br></pre></td></tr></table></figure><p><code>/usr/local/python3/bin/python3</code>：对应版本python所在目录</p><p><code>venv</code>：虚拟环境名称</p></li></ol><h2 id="进入虚拟环境"><a href="#进入虚拟环境" class="headerlink" title="进入虚拟环境"></a>进入虚拟环境</h2><p>虚拟环境在不同的操作系统下进入的方式不同。</p><ol><li><p>Windows进入虚拟环境，进入目标文件夹后输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">venv\Scripts\activate</span><br></pre></td></tr></table></figure><p>回车即可进入虚拟环境。</p></li><li><p>Linux进入虚拟环境，进入目标文件夹后输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source venv&#x2F;bin&#x2F;activate</span><br></pre></td></tr></table></figure><p>回车即可进入虚拟环境。</p></li></ol><h2 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h2><p>输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><h1 id="Python-切换使用国内镜像源"><a href="#Python-切换使用国内镜像源" class="headerlink" title="Python 切换使用国内镜像源"></a>Python 切换使用国内镜像源</h1><h2 id="国内镜像源"><a href="#国内镜像源" class="headerlink" title="国内镜像源"></a>国内镜像源</h2><p>清华：<a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p><p>阿里云：<a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a></p><p>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a></p><p>华中理工大学：<a href="http://pypi.hustunique.com/">http://pypi.hustunique.com/</a></p><p>山东理工大学：<a href="http://pypi.sdutlinux.org/">http://pypi.sdutlinux.org/</a> </p><p>豆瓣：<a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></p><h2 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a>临时使用</h2><p>可以在使用pip的时候加参数-i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a><br>例如：pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a> pyspider，这样就会从清华这边的镜像去安装pyspider库。</p><h2 id="永久使用"><a href="#永久使用" class="headerlink" title="永久使用"></a>永久使用</h2><p>Linux下，修改 ~/.pip/pip.conf (没有就创建一个文件夹及文件。文件夹要加“.”，表示是隐藏文件夹)</p><p>内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url &#x3D; https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br><span class="line">[install]</span><br><span class="line">trusted-host &#x3D; https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure><p><code>trusted-host</code>： 此参数是为了避免麻烦，否则使用的时候可能会提示不受信任。</p><p>windows下，直接在user目录（%HOMEPATH%）中创建一个pip文件夹，再新建文件pip.ini。（例如：C:\Users\DD\pip\pip.ini）内容同上。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo文章生成永久链接</title>
      <link href="article/2c60.html"/>
      <url>article/2c60.html</url>
      
        <content type="html"><![CDATA[<h1 id="文章生成永久链接-abbrlink"><a href="#文章生成永久链接-abbrlink" class="headerlink" title="文章生成永久链接(abbrlink)"></a>文章生成永久链接(abbrlink)</h1><p>来源于 <a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a><br>记录一下安装后的配置过程</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>hexo站点配置文件中，默认的文章链接是：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title</span></span><br></pre></td></tr></table></figure><p>这种生成的链接地址很长，文章版权的链接地址会出现一大串字符编码，一点也不好看。因此需要修改文章生成链接的格式。</p><p>下面安装abbrlink插件。</p><p>首先再根目录下执行下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>然后再hexo站点配置文件下添加如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">    <span class="attr">alg:</span> <span class="string">crc16</span>   <span class="comment">#算法： crc16(default) and crc32</span></span><br><span class="line">    <span class="attr">rep:</span> <span class="string">hex</span>     <span class="comment">#进制： dec(default) and hex: dec #输出进制：十进制和十六进制，默认为10进制。丨dec为十进制，hex为十六进制</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再将站点配置文件的<code>permalink</code>的值修改为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink.html</span>  <span class="comment"># 此处可以自己设置，也可以直接使用 :/abbrlink</span></span><br></pre></td></tr></table></figure><h2 id="样品示例"><a href="#样品示例" class="headerlink" title="样品示例"></a>样品示例</h2><p>生成的链接如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">crc16 &amp; hex</span><br><span class="line">https:&#x2F;&#x2F;post.zz173.com&#x2F;posts&#x2F;66c8.html</span><br><span class="line"></span><br><span class="line">crc16 &amp; dec</span><br><span class="line">https:&#x2F;&#x2F;post.zz173.com&#x2F;posts&#x2F;65535.html</span><br><span class="line">crc32 &amp; hex</span><br><span class="line">https:&#x2F;&#x2F;post.zz173.com&#x2F;posts&#x2F;8ddf18fb.html</span><br><span class="line"></span><br><span class="line">crc32 &amp; dec</span><br><span class="line">https:&#x2F;&#x2F;post.zz173.com&#x2F;posts&#x2F;1690090958.html</span><br></pre></td></tr></table></figure><h2 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h2><p>crc16的最大帖子数是65535。（对于个人博客网站，此数字不错）</p><h1 id="hexo新建文章同时生成文章文件夹"><a href="#hexo新建文章同时生成文章文件夹" class="headerlink" title="hexo新建文章同时生成文章文件夹"></a>hexo新建文章同时生成文章文件夹</h1><p>源自hexo原生配置，可直接在站点配置文件中配置。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 <code>config.yml</code> 文件中的 <code>post_asset_folder</code> 选项设为 <code>true</code> 来打开。</p><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><p>站点配置文件<code>_config.yml</code>中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>当资源文件管理功能打开后，Hexo将会在你每一次通过 <code>hexo new [layout] </code> 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个文章文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。</p><h2 id="引用资源方式"><a href="#引用资源方式" class="headerlink" title="引用资源方式"></a>引用资源方式</h2><p>可直接在markdown编辑器中引入本地文件，再将文章资源文件夹名称前的内容全部删掉，并且把图片的路径都设置成”/“，编写完毕后使用<code>hexo g</code>生成时即可访问图片。</p>]]></content>
      
      
      <categories>
          
          <category> 网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装Python3.8教程--记录常见安装问题</title>
      <link href="article/be4e.html"/>
      <url>article/be4e.html</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu安装Python3"><a href="#Ubuntu安装Python3" class="headerlink" title="Ubuntu安装Python3"></a>Ubuntu安装Python3</h1><p>我使用的Ubuntu版本为18.4，刚安装的系统，安装软件时最好先更新一下系统内的依赖包，否则可能会出现一些玄学问题。</p><h2 id="更新系统应用包"><a href="#更新系统应用包" class="headerlink" title="更新系统应用包"></a>更新系统应用包</h2><p>自Ubuntu 16.4 版本之后 <code>apt</code> 已经可以代替<code>apt-get</code>，但<code>apt-get</code>仍可使用。</p><p>一定要先把包更新后再去安装后面的依赖项。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get dist-upgrade</span><br></pre></td></tr></table></figure><h2 id="安装环境依赖"><a href="#安装环境依赖" class="headerlink" title="安装环境依赖"></a>安装环境依赖</h2><p>更新好系统包之后开始安装以下依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential python-dev python-setuptools python-pip python-smbus build-essential libncursesw5-dev libgdbm-dev libc6-dev zlib1g-dev libsqlite3-dev tk-dev libssl-dev openssl libffi-dev</span><br></pre></td></tr></table></figure><h2 id="安装make工具"><a href="#安装make工具" class="headerlink" title="安装make工具"></a>安装make工具</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install make</span><br></pre></td></tr></table></figure><h2 id="安装c编译器"><a href="#安装c编译器" class="headerlink" title="安装c编译器"></a>安装c编译器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc</span><br></pre></td></tr></table></figure><h2 id="官网源码下载"><a href="#官网源码下载" class="headerlink" title="官网源码下载"></a>官网源码下载</h2><p>先下载官网提供的 Python3 源码包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;www.python.org&#x2F;ftp&#x2F;python&#x2F;3.8.3&#x2F;Python-3.8.3.tgz</span><br></pre></td></tr></table></figure><h2 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir &#x2F;usr&#x2F;local&#x2F;python3</span><br></pre></td></tr></table></figure><h2 id="解压编译安装"><a href="#解压编译安装" class="headerlink" title="解压编译安装"></a>解压编译安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf Python-3.8.3.tgz</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd Python-3.8.3</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo .&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;python3</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>在 <code>make install</code>处可能会提示没有权限，最好先<code>sudo su</code>后再执行<code>make</code>指令。</p><blockquote><p><code>./configure</code>说明：</p><p>若执行的是 ./configure，则安装后可执行文件默认放在/usr /local/bin，库文件默认放在/usr/local/lib，配置文件默认放在/usr/local/include，其它的资源文件放在/usr /local/share。</p><p>若执行的是./configure –prefix=/usr/local/python3，则可执行文件放在/usr /local/python3/bin，库文件放在/usr/local/python3/lib，配置文件放在/usr/local/python3/include，其它的资源文件放在/usr /local/python3/share</p></blockquote><p>正常情况下只要不缺少上边的步骤都可以完成安装。</p><h2 id="制作软链"><a href="#制作软链" class="headerlink" title="制作软链"></a>制作软链</h2><p>我在这里创建的软链是<code>python3.8</code>，如果需要设置成<code>python3</code>的话把<code>.8</code>去掉即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;python3 &#x2F;usr&#x2F;bin&#x2F;python3.8</span><br></pre></td></tr></table></figure><p>同理，在这里的<code>pip</code>也是<code>python3.8</code>的<code>pip</code>，软链命名仍然加上<code>.8</code>，以防止冲突。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;pip3 &#x2F;usr&#x2F;bin&#x2F;pip3.8</span><br></pre></td></tr></table></figure><h1 id="CentOS安装Python3"><a href="#CentOS安装Python3" class="headerlink" title="CentOS安装Python3"></a>CentOS安装Python3</h1><p>虽然centos已经停止更新了，这个方法也可以在以往版本安装。</p><h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y groupinstall &quot;Development tools&quot;</span><br><span class="line"></span><br><span class="line">yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br></pre></td></tr></table></figure><h2 id="官网源码下载-1"><a href="#官网源码下载-1" class="headerlink" title="官网源码下载"></a>官网源码下载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;www.python.org&#x2F;ftp&#x2F;python&#x2F;3.6.2&#x2F;Python-3.6.2.tar.xz</span><br></pre></td></tr></table></figure><h2 id="创建文件夹-1"><a href="#创建文件夹-1" class="headerlink" title="创建文件夹"></a>创建文件夹</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir &#x2F;usr&#x2F;local&#x2F;python3 </span><br></pre></td></tr></table></figure><h2 id="解压编译安装-1"><a href="#解压编译安装-1" class="headerlink" title="解压编译安装"></a>解压编译安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -xvJf  Python-3.6.2.tar.xz</span><br><span class="line">cd Python-3.6.2</span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;python3</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h2 id="制作软链-1"><a href="#制作软链-1" class="headerlink" title="制作软链"></a>制作软链</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;python3 &#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;pip3 &#x2F;usr&#x2F;bin&#x2F;pip3</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python3 </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu从入门到放弃--系统基础</title>
      <link href="article/8c3f.html"/>
      <url>article/8c3f.html</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu从入门到放弃–系统基础"><a href="#Ubuntu从入门到放弃–系统基础" class="headerlink" title="Ubuntu从入门到放弃–系统基础"></a>Ubuntu从入门到放弃–系统基础</h1><p>Linux是一款多用户多任务的分时复用操作系统</p><h1 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h1><h2 id="目录和路径"><a href="#目录和路径" class="headerlink" title="目录和路径"></a>目录和路径</h2><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li>目录是一组相关文件的集合。</li><li>一个目录下除了可以存放文件之外还可以存放其他目录，即可包含子目录。</li><li>在确定文件、目录位置时，DOS 和 Unix/Linux 都采用”路径名+文件名“的方式。路径反映的是目录与目录之间的关系。</li></ul><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>Unix/Linux路径由到达定位文件的目录组成。在Unix/Linux系统中组成路径的目录分割符为斜杠”/“，而DOS则用反斜杠”\“来分割各个目录。</p><p>路径分为绝对路径和相对路径；</p><ul><li>绝对路径</li></ul><ol><li>绝对路径是从目录树的树根”/“目录开始往下直至到达文件所经过的所有节点目录。</li><li>下级目录接在上级目录后面用”/“隔开。</li><li>注意：绝对路径都是从”/“开始的，所以第一个字符一定是”/“。</li></ol><ul><li>相对路径</li></ul><ol><li>相对路径是指目标目录相对于当前目录的位置。</li><li>如果不在当前目录下，则需要使用两个特殊目录”.“和” ..“了。目录”.“指向当前目录，而目录”..“指向当前目录的上一级目录。</li></ol><h2 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h2><ul><li>**/**：根目录。一半根目录下只存放目录，在Linux下有且只有一个根目录。<br>所有的东西都是从这里开始。当你在终端里输入”/home“，你其实是在告诉电脑，先从/（根目录）开始，再进入到home目录。</li><li><strong>/bin</strong>：**/user/bin**：可执行二进制文件的目录，如常用的命令ls、tar、mv、cat等。</li><li>/boot：放置Linux系统启动时用到的一些文件，如Linux的内核文件：/boot/vmlinuz，系统引导管理器：/boot/grub。</li><li><strong>/dev</strong>：存放Linux系统下的设备文件，访问该目录下某个文件，相当于访问某个设备，常用的是挂载光驱 mount /dev/cdrom /mnt。</li><li><strong>/etc</strong>：系统配置文件存放的目录，不建议在此目录下存放可执行文件，重要的配置文件有 /etc/inittab、/etc/fstab、/etc/init.d、etc/Xll、etc/sysconfig、etc/xinetd.d。</li><li><strong>/home</strong>：系统默认的用户家目录，新增用户账号时，用户的家目录都存放在此目录下，<del>表示当前用户的家目录，</del>edu表示用户edu的家目录。</li><li><strong>/lib</strong>：**/usr/lib<strong>：</strong>/usr/local/lib**：系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助。</li><li>/lost+fount：系统异常产生错误时，会将一些遗失的片段放置于此目录下。</li><li>/mnt：/media：光盘默认挂载点，通常光盘挂载于 /mnt/cdrom 下，也不一定，可以选择任意位置进行挂载。</li><li>/opt：给主机额外安装软件所摆放的目录。</li><li>/proc：此目录的数据都在内存中，如系统核心，外部设备，网络状态，由于数据都存放于内存中，所以不占用磁盘空间，比较重要的目录有 /proc/cpuinfo、/proc/interrupts、/proc/dma、/proc/ioports、/proc/net/* 等。</li><li><strong>/root</strong>：系统管理员root的家目录（宿主目录）。</li><li>/sbin：**/usr/sbin<strong>：</strong>/usr/local/sbin**：放置系统管理员使用的可执行命令，如fdisk、shutdown、mount 等。与 /bin 不用的是，这几个目录是给系统管理员root使用的命令，一般用户只能”查看“而不能设置和使用。</li><li><strong>/tmp</strong>：一般用户或正在执行的程序临时存放文件的目录，任何人都可以访问，重要数据不可放置在此目录下。</li><li>/srv：服务启动之后需要访问的数据目录，如 www 服务需要访问的网页数据存放在 /srv/www内。</li><li><strong>/usr</strong>：应用程序存放目录，/usr/bin存放应用程序，/usr/share存放共享数据，/usr/lib存放不能直接运行的，确实许多程序运行所必需的一些函数库文件。/usr/local：存放软件升级包。/usr/share/doc：系统说明文件存放目录。/usrshare/man：程序说明文件存放目录。/usr/include：存放头文件。</li><li>/var：放置系统执行过程中经常变化的文件，如随时更改的日志文件。<br>/var/log，/var/log/message：所有的登录文件存放目录，<br>/var/spool/mail：右键存放的目录，/var/run：程序或服务启动后，其 <strong>PID</strong> 存放在该目录下。</li></ul><h2 id="文件分类"><a href="#文件分类" class="headerlink" title="文件分类"></a>文件分类</h2><p>在Unix/Linux操作系统中也必须区分文件类型，通过文件类型可以判断文件属于可执行文件、文本文件还是数据文件。在Unix/Linux系统中文件可以没有扩展名。</p><p>通常，Unix/Linux系统中常用的文件类型有7种：</p><ul><li>​    普通文件 -         ——磁盘存储</li><li>​    目录文件 d         ——磁盘存储</li><li>​    软链接文件 l        ——磁盘存储</li><li>​    管道文件 p         ——伪文件（不占用磁盘存储）</li><li>​    套接字文件 s         ——伪文件（不占用磁盘存储）</li><li>​    块设备文件 b         ——伪文件（不占用磁盘存储）</li><li>​    字符设备文件 c         ——伪文件（不占用磁盘存储）</li></ul><blockquote><p>命令：<code>ls + -l + 文件名</code>    查看该文件的详细信息描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r-- 1 eddie eddie 4032 6月 8 15:18 example.sl</span><br></pre></td></tr></table></figure><p>-rw-r–r–  文件属性，第一个字符代表文件类型：7种    （还有一种unknown文件）<br>            Linux下不以文件后缀名作为区分文件类型的依据</p><p>1  硬链接计数：见后续描述</p><p>eddie  文件所属用户：谁创建的默认属于谁</p><p>eddie  文件所属用户组：谁创建默认属于该用户所在用户组。用户——同名用户组</p><p>4032  文件所占存储空间大小（字节）：文件的实际大小。目录文件：4k整数倍</p><p>6月 8 15:18  文件创建、最后一次修改时间：初创文件——实际创建时间。修改过的文件——修改时间。</p><p>example.sl  文件名</p></blockquote><h3 id="普通文件"><a href="#普通文件" class="headerlink" title="普通文件"></a>普通文件</h3><p>普通文件是计算机操作系统用于存放数据、程序等信息的文件，一般都长期存放于外存储器（磁盘、磁带等）中。普通文件一般包括文本文件、数据文件、可执行的二进制程序文件等。</p><p>在Unix/Linux中可以通过file命令来查看文件的类型。如果file文件后面携带文件名，则查看指定文件的类型，如果携带通配符“*”，则可以查看当前目录下的所有文件的类型。</p><h3 id="目录文件"><a href="#目录文件" class="headerlink" title="目录文件"></a>目录文件</h3><p>Unix/Linux系统把目录看成是一种特殊的文件，利用它构成文件系统的树形结构。</p><p>目录文件只允许系统管理员对其进行修改，用户进程可以读取目录文件，但不能对他们进行修改。</p><p>每个目录文件至少包括两个条目，“..”表示上一级目录，“.”表示该目录本身。</p><h3 id="设备文件"><a href="#设备文件" class="headerlink" title="设备文件"></a>设备文件</h3><p>Unix/Linux系统把每个设备都映射成一个文件，这就是设备文件。它是用于向I/O设备的存取以一个字符为单位，块设备的存取以字符块为单位。每一种I/O设备对应一个设备文件，存放在/dev目录中，如行式打印机对应/dev/lp，第一个软盘驱动器对应/dev/fd0。</p><h3 id="管道文件"><a href="#管道文件" class="headerlink" title="管道文件"></a>管道文件</h3><p>管道文件也是Unix/Linux中较特殊的文件类型，这类文件多用于进程间的通信。</p><h3 id="软链接文件"><a href="#软链接文件" class="headerlink" title="软链接文件"></a>软链接文件</h3><p>类似于windows下的快捷方式，链接又可以分为软连接（符号链接）和硬链接。</p><h3 id="硬链接文件"><a href="#硬链接文件" class="headerlink" title="硬链接文件"></a>硬链接文件</h3><p>只限于Linux下才存在，创建硬链接文件后会自动同步初始文件内容，只需修改初始文件，硬链接文件的内容也会进行相同的变动。</p><p>硬链接计数：有多少个文件公用同一个inode编号</p><p>使用方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建硬链接：ln 旧文件 新硬链接文件</span><br></pre></td></tr></table></figure><p>特征：文件和硬链接文件之间，除文件名不一样之外，其他信息完全一致，并能实时同步。</p><p>查看硬链接文件的编号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls -i Linux.AppImage(文件名)</span><br><span class="line">1842173 Linux.AppImage</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ stat Linux.AppImage(文件名)</span><br><span class="line">  文件：Linux.AppImage</span><br><span class="line">  大小：45609000  块：89088      IO 块：4096   普通文件</span><br><span class="line">设备：801h&#x2F;2049dInode：1842173     硬链接：1</span><br><span class="line">权限：(0766&#x2F;-rwxrw-rw-)  Uid：( 1000&#x2F;   allen)   Gid：( 1000&#x2F;   allen)</span><br><span class="line">最近访问：2020-06-07 17:18:18.151056596 +0800</span><br><span class="line">最近更改：2020-06-04 23:15:59.000000000 +0800</span><br><span class="line">最近改动：2020-06-07 17:18:15.275803044 +0800</span><br><span class="line">创建时间：-</span><br></pre></td></tr></table></figure><h2 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h2><p>文件权限就是文件的访问控制权限，即哪些用户和组群可以访问文件以及可以执行什么样的操作。</p><p>Unix/Linux系统是一个典型的多用户系统，不同的用户处于不同的地位，对文件和目录有不同的访问权限。为了保护系统的安全性，Unix/Linux系统除了对用户权限作了严格的界定外，还在用户身份认证、访问控制、传输安全、文件读写权限等方面做了周密的控制。</p><p>在Unix/Linux中的每一个文件或目录都包含有访问权限，这些访问权限决定了谁能访问和如何访问这些文件和目录。</p><blockquote><p>ls + -l + 文件名    查看该文件的详细信息描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r-- 1 eddie eddie 4032 6月 8 15:18 example.sl</span><br></pre></td></tr></table></figure><p>其中 rw-r–r– 9个字符，分3组——文件所有者、文件所属组、其他人   ：rwx</p></blockquote><h3 id="访问用户"><a href="#访问用户" class="headerlink" title="访问用户"></a>访问用户</h3><p>通过设定权限可以从以下三种访问方式限制访问权限：</p><ul><li>只允许用户自己访问（所有者）<br>所有者就是创建文件的用户，用户是所有用户所创建文件的所有者，用户可以允许所在的用户组能访问用户的文件。</li><li>允许一个预先指定的用户组中的用户访问（用户组）<br>用户都组合成用户组，例如，某一类或某一项目中的所有用户都能够被系统管理员归为一个用户组，一个用户能够授予所在用户组的其他成员的文件访问权限。</li><li>允许系统中任何用户访问（其他用户）<br>用户也将自己的文件向系统内的所有用户开放，在这种情况下，系统内的所有用户都能够访问用户的目录或文件。在这种意义上，系统内的其他所有用户就是 other 用户类。</li></ul><p>这有点类似于QQ空间的访问权限。</p><ul><li>这个QQ空间是属于我的，我相当于管理者（也就是“所有者”），我想怎么访问就怎么访问。</li><li>同时我可以设置允许QQ好友访问，而这些QQ好友类似于“用户组”。</li><li>当然，我可以允许所有人访问，这里的所有人则类似于“其他用户”。</li></ul><h3 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h3><p>用户能够控制一个给定的文件或目录的访问程度，一个文件或目录可能有读、写及执行权限：</p><ul><li>读权限（r）<br>对文件而言，具有读取文件内容的权限；对目录来说，具有浏览目录的权限。</li><li>写权限（w）<br>对文件而言，具有新增、修改文件内容的权限；对目录来说，具有删除、移动目录内文件的权限。</li><li>可执行权限（x）<br>对文件而言，具有执行文件的权限；对目录来说该用户具有进入目录的权限。</li></ul><p><strong>注意：</strong>通常，Unix/Linux系统只允许文件的属主（所有者）或超级用户改变文件的读写权限。</p><h1 id="常用命令的使用"><a href="#常用命令的使用" class="headerlink" title="常用命令的使用"></a>常用命令的使用</h1><h2 id="命令使用方法"><a href="#命令使用方法" class="headerlink" title="命令使用方法"></a>命令使用方法</h2><h3 id="查看帮助文档"><a href="#查看帮助文档" class="headerlink" title="查看帮助文档"></a>查看帮助文档</h3><p><strong>–help</strong></p><p>一般是Linux命令自带的帮助信息，并不是所有命令都自带这个选项。如果我们想查看命令ls的用法：<strong>ls –help</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">allen@allen-virtual-machine:~$ ls --help</span><br><span class="line">用法：ls [选项]... [文件]...</span><br><span class="line">List information about the FILEs (the current directory by default).</span><br><span class="line">Sort entries alphabetically if none of -cftuvSUX nor --sort is specified.</span><br><span class="line"></span><br><span class="line">必选参数对长短选项同时适用。</span><br><span class="line">  -a, --all不隐藏任何以. 开始的项目</span><br><span class="line">  -A, --almost-all列出除. 及.. 以外的任何项目</span><br><span class="line">      --author与-l 同时使用时列出每个文件的作者</span><br><span class="line">  -b, --escape以八进制溢出序列表示不可打印的字符</span><br><span class="line">      --block-size&#x3D;SIZE      scale sizes by SIZE before printing them; e.g.,</span><br><span class="line">                               &#39;--block-size&#x3D;M&#39; prints sizes in units of</span><br><span class="line">                               1,048,576 bytes; see SIZE format below</span><br><span class="line">  -B, --ignore-backups       do not list implied entries ending with ~</span><br><span class="line">  -c                         with -lt: sort by, and show, ctime (time of last</span><br><span class="line">                               modification of file status information);</span><br><span class="line">                               with -l: show ctime and sort by name;</span><br><span class="line">                               otherwise: sort by ctime, newest first</span><br><span class="line">  -C                         list entries by columns</span><br><span class="line">      --color[&#x3D;WHEN]         colorize the output; WHEN can be &#39;always&#39; (default</span><br><span class="line">                               if omitted), &#39;auto&#39;, or &#39;never&#39;; more info below</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h3><p><strong>自动补全</strong></p><p>在敲出命令的前几个字母的同时，按下tab键，系统会自动帮我们补全命令。</p><p><strong>历史命令</strong></p><p>当系统执行过一些命令后，可按上下键翻看以前的命令，history将执行过的命令列举出来。</p><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h3 id="查看文件信息：ls"><a href="#查看文件信息：ls" class="headerlink" title="查看文件信息：ls"></a>查看文件信息：ls</h3><p>与DOS下的文件操作类似，在Unix/Linux系统中，也同样允许使用特殊字符来同时引用多个文件名，这些特殊字符被称为通配符。</p><table><thead><tr><th align="left">通配符</th><th>含义</th></tr></thead><tbody><tr><td align="left">*</td><td>文件代表文件名中所有字符</td></tr><tr><td align="left">ls te*</td><td>查找以te开头的文件</td></tr><tr><td align="left">ls   *html</td><td>查找结尾为html的文件</td></tr><tr><td align="left">?</td><td>代表文件名中任意一个字符</td></tr><tr><td align="left">ls ?.c</td><td>只找第一个字符任意，后缀为.c的文件</td></tr><tr><td align="left">ls a.?</td><td>只找只有3个字符，前2字符为a，最后一个字符任意的文件</td></tr><tr><td align="left">ls [a-f]*</td><td>找到从a到f范围内的任意一个字符开头的文件</td></tr><tr><td align="left">\                          <br /></td><td>如果要使通配符作为普通字符使用，可以在其前面加上转义字符。“?”和“*”处于方括号内时不用使用转义字符就失去通配符的作用。</td></tr><tr><td align="left">ls \*a</td><td>查找文件名为*a的文件</td></tr></tbody></table><ul><li><p>ls + -l + 文件名    查看该文件的详细信息描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r-- 1 eddie eddie 4032 6月 8 15:18 example.sl</span><br><span class="line">-rw-r--r--  文件属性</span><br><span class="line">1  硬链接计数</span><br><span class="line">eddie  文件所属用户</span><br><span class="line">eddie  文件所属用户组</span><br><span class="line">4032  文件所占存储空间大小（字节）</span><br><span class="line">6月 8 15:18  文件创建、最后一次修改时间</span><br><span class="line">example.sl  文件名</span><br></pre></td></tr></table></figure></li><li><p>ls 常用参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-a：查看隐藏文件。——以“.”开头的文件或目录</span><br><span class="line">-d：查看目录本身属性</span><br><span class="line">--help：查看帮助信息</span><br></pre></td></tr></table></figure></li><li><p>pwd                     查看当前目录</p></li><li><p>date                     查看当前时间戳</p></li><li><p>history                 查看输入历史</p></li></ul><h3 id="输出重定向命令：-gt"><a href="#输出重定向命令：-gt" class="headerlink" title="输出重定向命令： &gt;"></a>输出重定向命令： &gt;</h3><p>Linux允许将命令执行结果重定向到一个文件，本应显示在终端上的内容保存到指定文件中。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ls &gt; abc.txt</span><br><span class="line">$ ls</span><br><span class="line">Linux.app</span><br><span class="line">$ cat abc.txt</span><br><span class="line">Linux.app</span><br></pre></td></tr></table></figure><p>&gt;输出重定向到指定文件，文件不存在自动创建。存在覆盖源文件。</p><p>&gt;&gt;将内容追加到指定文件，文件不存在自动创建，存在不覆盖。</p><h3 id="分屏显示文件：more"><a href="#分屏显示文件：more" class="headerlink" title="分屏显示文件：more"></a>分屏显示文件：more</h3><ul><li><p><code>more + 文件名</code>            将文件内容部分展示到屏幕上，按回车向下多显示一行，按空格向下多显示一页</p></li><li><p><code>less + 文件名</code>             同more用法，但是最底下显示一个冒号，输入数字可以跳转到对应行</p></li></ul><h3 id="查看或合并文件内容：cat"><a href="#查看或合并文件内容：cat" class="headerlink" title="查看或合并文件内容：cat"></a>查看或合并文件内容：cat</h3><ul><li><code>cat + 文件名</code>                将文件内容全部显示到屏幕上，直接显示文件结尾</li><li><code>tac + 文件名</code>                将文件内容倒着显示，多用于读取服务器日志等情况</li></ul><p>合并文件并写入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat 1.txt 2.txt &gt; 3.txt</span><br></pre></td></tr></table></figure><p>将1.txt和2.txt文件合并后写入3.txt中。</p><h3 id="管道："><a href="#管道：" class="headerlink" title="管道：|"></a>管道：|</h3><p>管道：一个命令的输出可以通过管道作为另一个命令的输入。</p><p>管道我们可以理解现实生活中的管子，管子的一头塞东西进去，另一头取出来，这里”|“的左右分为两端，左端塞东西（写），右端取东西（读）。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat .bashrc | more</span><br><span class="line">$ cat .bashrc | grep if</span><br></pre></td></tr></table></figure><p>将左侧的内容按右侧的方式输出。</p><p>常用筛选系统中，所有正在运行的xxx进程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | grep xxx</span><br></pre></td></tr></table></figure><p><strong>ps：</strong>列举当前系统中所有的进程，仅表示前台进程（根据所处权限而定）。</p><p><strong>ps -a：</strong>列举系统中所有的进程。</p><p><strong>ps -au：</strong>表明对应的进程是哪个用户的。</p><p><strong>ps -aux：</strong>表示不占用终端的。</p><p><strong>xxx：</strong>代表所查询的进程，例如mysql…</p><h3 id="清屏：clear"><a href="#清屏：clear" class="headerlink" title="清屏：clear"></a>清屏：clear</h3><p>clear作用为清除终端上的显示（类似于DOS的3清屏功能），也可使用快捷键：ctrl + l（”l“为字母）。</p><h3 id="切换工作目录：cd"><a href="#切换工作目录：cd" class="headerlink" title="切换工作目录：cd"></a>切换工作目录：cd</h3><p>在使用Unix/Linux的时候，经常需要更换工作目录。cd命令可以帮助用户切换工作目录。Linux所有的目录和文件名大小写敏感。</p><p>cd后面可跟绝对路径，也可以跟相对路径。如果省略目录，则默认切换到当前用户的主目录。</p><table><thead><tr><th>命令</th><th align="left">含义</th></tr></thead><tbody><tr><td>cd</td><td align="left">切换到当前用户的主目录（/home/用户目录），用户登陆的时候，默认的目录就是用户的主目录。</td></tr><tr><td>cd ~</td><td align="left">切换到当前用户的主目录（/home/用户目录）</td></tr><tr><td>cd .</td><td align="left">切换到当前目录</td></tr><tr><td>cd ..</td><td align="left">切换到上级目录</td></tr><tr><td>cd -</td><td align="left">切换到上一次工作过的目录中。</td></tr></tbody></table><h3 id="显示当前路径：pwd"><a href="#显示当前路径：pwd" class="headerlink" title="显示当前路径：pwd"></a>显示当前路径：pwd</h3><p>使用<code>pwd</code>命令可以显示当前的工作目录，该命令很简单，直接输入pwd即可，后面不带参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">&#x2F;home&#x2F;allen</span><br></pre></td></tr></table></figure><p>终端提示符的语法规则：用户名@主机名</p><p>当前shell进程工作目录$/#    ——$：普通用户、#：管理员</p><h3 id="创建目录：mkdir"><a href="#创建目录：mkdir" class="headerlink" title="创建目录：mkdir"></a>创建目录：mkdir</h3><p>通过<code>mkdir</code>命令可以创建一个新的目录。参数-p可递归创建目录。</p><p>需要注意的是新建目录的名称不能与当前目录中已有的目录或文件同名，并且目录创建者必须对当前目录具有写权限。</p><h3 id="删除目录：rmdir"><a href="#删除目录：rmdir" class="headerlink" title="删除目录：rmdir"></a>删除目录：rmdir</h3><p>可使用<code>rmdir</code>命令删除一个目录。必须离开目录，并且目录必须为空目录，不然提示删除失败。</p><h3 id="创建文件：touch"><a href="#创建文件：touch" class="headerlink" title="创建文件：touch"></a>创建文件：touch</h3><p>使用<code>touch</code>命令可以创建一个文件</p><h3 id="删除文件和目录：rm-r"><a href="#删除文件和目录：rm-r" class="headerlink" title="删除文件和目录：rm -r"></a>删除文件和目录：rm -r</h3><p>可通过rm删除文件或目录。使用rm命令要小心，因为<strong>文件删除后不能恢复</strong>。为防止文件误删，可以在rm后使用-i参数以逐个确认要删除的文件。</p><p>常用参数及含义如下表所示：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-i</td><td>以进行交互式方式执行</td></tr><tr><td>-f</td><td>强制删除，忽略不存在的文件，无需提示</td></tr><tr><td>-r</td><td>递归地删除目录下的内容，删除文件夹时必须加此参数</td></tr></tbody></table><h3 id="建立链接文件：ln"><a href="#建立链接文件：ln" class="headerlink" title="建立链接文件：ln"></a>建立链接文件：ln</h3><ul><li>Linux链接文件类似于Windows下的快捷方式。</li><li>链接文件分为软链接和硬链接。</li><li>软链接：软链接不占用磁盘空间，源文件删除则软链接失效。</li><li>硬链接：硬链接只能链接普通文件，<strong>不能链接目录</strong>。</li></ul><p>使用格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ln 源文件 链接文件（硬链接）</span><br><span class="line">或</span><br><span class="line">ln -s 源文件 链接文件（软链接）</span><br></pre></td></tr></table></figure><p>如果<strong>没有-s</strong>选项代表建立了一个硬链接文件，两个文件占用相同大小的硬盘空间，即使删除了源文件，链接文件还是存在，所以-s选项是更长见的形式。</p><p><strong>注意：</strong>如果软链接文件和源文件不在同一个目录，源文件要使用绝对路径，不能使用相对路径。建议使用”<strong>绝对路径</strong>“创建软链接。</p><h3 id="拷贝文件：cp"><a href="#拷贝文件：cp" class="headerlink" title="拷贝文件：cp"></a>拷贝文件：cp</h3><p>cp命令的功能是将给出的文件或目录复制到另一个文件或目录中，相当于DOS下的copy命令。</p><p>常用选项说明：</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-a</td><td>该选项通常在复制目录时使用，它保留链接、文件属性，并递归地复制目录，简单而言，保持文件原有属性。</td></tr><tr><td>-f</td><td>覆盖已经存在的目标文件而不提示</td></tr><tr><td>-i</td><td>交互式复制，在覆盖目标文件之前将给出提示要求用户确认</td></tr><tr><td>-r</td><td>若给出的源文件是目录文件，则cp将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名</td></tr><tr><td>-v</td><td>显示拷贝进度</td></tr></tbody></table><p><strong>拷贝单个文件：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cp file.h a拷贝file.h文件到a目录下</span><br><span class="line">完整形式：</span><br><span class="line">$ cp .&#x2F;file.h a&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp file.h .&#x2F;a&#x2F;file.hard拷贝file.h文件到a目录并改名为file.hard</span><br></pre></td></tr></table></figure><p><strong>拷贝目录：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp vim_configure&#x2F; code&#x2F; -ivr把文件vim_configure拷贝到code目录里</span><br></pre></td></tr></table></figure><h3 id="移动文件：mv"><a href="#移动文件：mv" class="headerlink" title="移动文件：mv"></a>移动文件：mv</h3><p>用户可以使用mv命令来移动文件或目录，也可以给文件或目录重命名。</p><p>常用选项说明：</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-f</td><td>禁止交互式操作，如有覆盖也不会给出提示</td></tr><tr><td>-i</td><td>确认交互方式操作，如果mv操作将导致对已存在的目标文件的覆盖，系统会询问是否重写，要求用户回答以避免误覆盖文件。</td></tr><tr><td>-v</td><td>显示移动进度</td></tr></tbody></table><p>移动文件（目标文件夹存在）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mv file.h dir2将file.h文件移动到dir2文件夹</span><br></pre></td></tr></table></figure><p>改名文件（目标文件夹不存在）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mv file.h 12345file.h文件改名为12345</span><br></pre></td></tr></table></figure><h3 id="获取文件类型：file"><a href="#获取文件类型：file" class="headerlink" title="获取文件类型：file"></a>获取文件类型：file</h3><p>Linux系统文件类型不是根据文件扩展名分类的，通过file命令可以确认文件具体类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file Music</span><br><span class="line">Music: directory</span><br></pre></td></tr></table></figure><h3 id="文件压缩解压：tar"><a href="#文件压缩解压：tar" class="headerlink" title="文件压缩解压：tar"></a>文件压缩解压：tar</h3><p>Linux中默认支持的压缩命令有：<code>gzip</code>和<code>bzip</code></p><p><strong>gzip</strong>    不能打包压缩！不能保留源文件。</p><p><strong>bzip</strong>    不能打包压缩！</p><p><strong>tar：</strong>    打包压缩，解压缩</p><p>压缩文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ tar zcvf test1.tar.gz file1 file2     将file1和file2打包压缩为test1.tar.gz</span><br><span class="line">z：gzip格式压缩</span><br><span class="line">c：创建压缩文件</span><br><span class="line">v：输出压缩详细</span><br><span class="line">f：指定压缩后的文件名</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ tar jcvf test1.tar.bz2 file1 file2     将file1和file2打包压缩为test1.tar.bz2</span><br><span class="line">j：bzip格式压缩</span><br><span class="line">c：创建压缩文件</span><br><span class="line">v：输出压缩详细</span><br><span class="line">f：指定压缩后的文件名</span><br></pre></td></tr></table></figure><p><code>.tar.gz</code> 和 <code>.tar.bz2</code> 不具有语法强制性，但是推荐使用！</p><p>解压缩文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar zxvf test1.tar.gz</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar jxvf test1.tar.bz2</span><br></pre></td></tr></table></figure><h3 id="文件压缩解压：zip"><a href="#文件压缩解压：zip" class="headerlink" title="文件压缩解压：zip"></a>文件压缩解压：zip</h3><ul><li>通过zip压缩文件的目标文件不需要指定扩展名，默认扩展名为zip。</li><li>压缩文件：zip -r 压缩包名（没有.zip后缀） 打包压缩材料</li><li>解压文件：unzip -d 解压后的位置目录 待解压缩文件</li></ul><h3 id="文件压缩解压：rar"><a href="#文件压缩解压：rar" class="headerlink" title="文件压缩解压：rar"></a>文件压缩解压：rar</h3><p>Ubuntu默认没有安装rar，安装命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install rar</span><br></pre></td></tr></table></figure><p>压缩文件（压缩后原文件消失）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ rar a -r my.rar .&#x2F;file*</span><br><span class="line">my.rar 压缩包名 (.rar后缀可加可不加）</span><br><span class="line">file* 打包压缩的文件（当前目录下以file开头的所有文件）</span><br></pre></td></tr></table></figure><p>解压缩文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rar x my.rar</span><br></pre></td></tr></table></figure><h3 id="查看命令位置：which"><a href="#查看命令位置：which" class="headerlink" title="查看命令位置：which"></a>查看命令位置：which</h3><p>查找可执行文件的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ which ls</span><br><span class="line">&#x2F;bin&#x2F;ls</span><br></pre></td></tr></table></figure><h2 id="用户权限管理"><a href="#用户权限管理" class="headerlink" title="用户权限管理"></a>用户权限管理</h2><h3 id="查看当前登录用户：whoami"><a href="#查看当前登录用户：whoami" class="headerlink" title="查看当前登录用户：whoami"></a>查看当前登录用户：whoami</h3><p><code>whoami</code>该命令用户查看当前系统当前账户的用户名。可通过<code>cat /etc/passwd</code>查看系统用户信息。</p><p>由于系统管理员通常需要使用多种身份登录系统，例如通常使用普通用户登录系统，然后再以su命令切换到root身份对系统进行管理。这时候就可以使用whoami来查看当前用户的身份。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">allen@allen-virtual-machine:&#x2F;$ whoami</span><br><span class="line">allen</span><br></pre></td></tr></table></figure><h3 id="退出登录账户：exit"><a href="#退出登录账户：exit" class="headerlink" title="退出登录账户：exit"></a>退出登录账户：exit</h3><ul><li>如果是图形界面，退出当前终端；</li><li>如果是使用ssh远程登录，退出登陆账户；</li><li>如果是切换后的登陆用户，退出则返回上一个登陆账号。</li></ul><h3 id="切换用户：su"><a href="#切换用户：su" class="headerlink" title="切换用户：su"></a>切换用户：su</h3><p>可以通过su命令切换用户，su后面可以加”-“。 su 和 su - 命令不同之处在于， su - 切换到对应的用户时会将当前的工作目录自动转换到切换后的用户主目录；</p><ul><li><code>su 用户名</code>：切换到指定用户登录，不修改工作目录位置。</li><li><code>su - 用户名</code>：切换到指定用户登录，修改工作目录位置到该用户的宿主目录</li><li><code>su - root</code>：切换root用户登录，修改工作目录位置到root的宿主目录</li><li><code>su root</code>：切换root用户登录，不改变工作目录位置，等价于（<code>sudo su</code>）</li><li><code>sudo 关键字</code>：临时获得依次root用户权限。执行完此命令后权限失效。</li></ul><p><strong>注意：</strong>在Ubuntu平台下，需要在命令前加“sudo”，如果在某些操作需要管理员才能操作，Ubuntu无需切换到root用户即可操作，只需加“sudo”即可。</p><p>sudo是Ubuntu平台下允许系统管理员让普通用户执行一些或全部的root命令的一个工具，减少了root用户的登陆和管理实践，提高了安全性。</p><h3 id="添加、删除用户：adduser、deluser"><a href="#添加、删除用户：adduser、deluser" class="headerlink" title="添加、删除用户：adduser、deluser"></a>添加、删除用户：adduser、deluser</h3><ul><li><code>adduser 新用户名</code>  新建用户</li><li><code>deluser 用户名</code> 删除用户</li><li><code>cat /etc/passwd</code> 查看用户组</li></ul><h3 id="添加、删除用户组：addgroup、delgroup"><a href="#添加、删除用户组：addgroup、delgroup" class="headerlink" title="添加、删除用户组：addgroup、delgroup"></a>添加、删除用户组：addgroup、delgroup</h3><ul><li><code>addgroup 新用户组名</code>  新建用户组</li><li><code>delgroup 用户组名</code> 删除用户组</li><li><code>cat /etc/group</code> 查看用户组</li></ul><h3 id="设置用户密码：passwd"><a href="#设置用户密码：passwd" class="headerlink" title="设置用户密码：passwd"></a>设置用户密码：passwd</h3><p>在Unix/Linux中，超级用户可以使用passwd命令为普通用户设置或修改用户口令。用户也可以直接使用该命令来修改自己的口令，而无需在命令后面使用用户名。</p><h3 id="修改文件所有者：chown"><a href="#修改文件所有者：chown" class="headerlink" title="修改文件所有者：chown"></a>修改文件所有者：chown</h3><p>将文件的所属权限修改为所需的用户。</p><p>使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown 用户名 文件或目录名</span><br></pre></td></tr></table></figure><h3 id="修改文件所属组：chgrp"><a href="#修改文件所属组：chgrp" class="headerlink" title="修改文件所属组：chgrp"></a>修改文件所属组：chgrp</h3><p>使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chgrp 新组名 待修改组名的文件名或目录名</span><br></pre></td></tr></table></figure><h3 id="修改文件到新的用户、用户组"><a href="#修改文件到新的用户、用户组" class="headerlink" title="修改文件到新的用户、用户组"></a>修改文件到新的用户、用户组</h3><p>使用命令<code>chown 用户名:用户组名 文件或目录名</code></p><p>可直接同时修改文件的所有者和所属组。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chown nobody:nogroup a.c</span><br><span class="line">可将a.c文件设置到nobody用户、nogroup用户组下。</span><br></pre></td></tr></table></figure><h3 id="修改文件权限：chmod"><a href="#修改文件权限：chmod" class="headerlink" title="修改文件权限：chmod"></a>修改文件权限：chmod</h3><p>chmod修改文件权限有两种使用格式：字母法与数字法</p><h3 id="修改文件权限：字母法"><a href="#修改文件权限：字母法" class="headerlink" title="修改文件权限：字母法"></a>修改文件权限：字母法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u&#x2F;g&#x2F;o&#x2F;a+&#x2F;-&#x2F;&#x3D;rwx文件</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">[ u/g/o/a ]</th><th align="left">含义</th></tr></thead><tbody><tr><td align="center">u</td><td align="left">user表示该文件的所有者</td></tr><tr><td align="center">g</td><td align="left">group表示与该文件的所有者属于同一组（group）者，即用户组</td></tr><tr><td align="center">o</td><td align="left">other 表示其他以外的人</td></tr><tr><td align="center">a</td><td align="left">all表示这三者皆是</td></tr></tbody></table><table><thead><tr><th align="center">[ + - = ]</th><th>含义</th></tr></thead><tbody><tr><td align="center">+</td><td>增加权限</td></tr><tr><td align="center">-</td><td>撤销权限</td></tr><tr><td align="center">=</td><td>设定权限</td></tr></tbody></table><table><thead><tr><th align="center">[ r w x ]</th><th>含义</th></tr></thead><tbody><tr><td align="center">r</td><td>read表示可读取，对于一个目录，如果没有r权限，那么就意味着不能通过ls查看这个目录的内容。</td></tr><tr><td align="center">w</td><td>write表示可写入，对于一个目录，如果没有w权限，那么就意味着不能在目录下创建新的文件。</td></tr><tr><td align="center">x</td><td>excute表示可执行，对于一个目录，如果没有x权限，那么就意味着不能通过cd进入这个目录。</td></tr></tbody></table><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod o+w file 给文件file的其他用户增加写权限。</span><br></pre></td></tr></table></figure><h3 id="修改文件权限：数字法"><a href="#修改文件权限：数字法" class="headerlink" title="修改文件权限：数字法"></a>修改文件权限：数字法</h3><p>chmod rwx 文件</p><ul><li><p>r 代表 4</p></li><li><p>w 代表 2</p></li><li><p>x 代表 1</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ chmod 536 file1对file1文件修改权限</span><br><span class="line">$ chmod 777 dir1 -R将dir1文件夹内所有文件的权限改为777</span><br></pre></td></tr></table></figure><h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2><h3 id="查看进程信息：ps"><a href="#查看进程信息：ps" class="headerlink" title="查看进程信息：ps"></a>查看进程信息：ps</h3><p>进程是一个具有一定独立功能的程序，它是操作系统动态执行的基本单元。</p><p>ps命令可以查看进程的详细状况，常用选项（选项可以不加“-”）如下：</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-a</td><td>显示终端上的所有进程，包括其他用户的进程</td></tr><tr><td>-u</td><td>显示进程的详细状态</td></tr><tr><td>-x</td><td>显示没有控制终端的进程</td></tr><tr><td>-w</td><td>显示加宽，以便显示更多的信息</td></tr><tr><td>-r</td><td>只显示正在运行的进程</td></tr></tbody></table><h3 id="终止进程：kill"><a href="#终止进程：kill" class="headerlink" title="终止进程：kill"></a>终止进程：kill</h3><p>kill命令指定进程号的进程，配合ps使用（可以通过<code>ps aux | grep</code>获取）。</p><p>信号值从0到15，其中9为绝对终止，可以处理一般信号无法终止的进程。</p><p>有些进程不能直接杀死，这时候我们需要加一个参数“-9”，“-9”代表强制结束：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kill -9 欲终止的进程ID</span><br></pre></td></tr></table></figure><p>kill所有的信号值含义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ kill -l</span><br><span class="line"> 1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL 5) SIGTRAP</span><br><span class="line"> 6) SIGABRT 7) SIGBUS 8) SIGFPE 9) SIGKILL10) SIGUSR1</span><br><span class="line">11) SIGSEGV12) SIGUSR213) SIGPIPE14) SIGALRM15) SIGTERM</span><br><span class="line">16) SIGSTKFLT17) SIGCHLD18) SIGCONT19) SIGSTOP20) SIGTSTP</span><br><span class="line">21) SIGTTIN22) SIGTTOU23) SIGURG24) SIGXCPU25) SIGXFSZ</span><br><span class="line">26) SIGVTALRM27) SIGPROF28) SIGWINCH29) SIGIO30) SIGPWR</span><br><span class="line">31) SIGSYS34) SIGRTMIN35) SIGRTMIN+136) SIGRTMIN+237) SIGRTMIN+3</span><br><span class="line">38) SIGRTMIN+439) SIGRTMIN+540) SIGRTMIN+641) SIGRTMIN+742) SIGRTMIN+8</span><br><span class="line">43) SIGRTMIN+944) SIGRTMIN+1045) SIGRTMIN+1146) SIGRTMIN+1247) SIGRTMIN+13</span><br><span class="line">48) SIGRTMIN+1449) SIGRTMIN+1550) SIGRTMAX-1451) SIGRTMAX-1352) SIGRTMAX-12</span><br><span class="line">53) SIGRTMAX-1154) SIGRTMAX-1055) SIGRTMAX-956) SIGRTMAX-857) SIGRTMAX-7</span><br><span class="line">58) SIGRTMAX-659) SIGRTMAX-560) SIGRTMAX-461) SIGRTMAX-362) SIGRTMAX-2</span><br><span class="line">63) SIGRTMAX-164) SIGRTMAX</span><br></pre></td></tr></table></figure><h3 id="前台、后台"><a href="#前台、后台" class="headerlink" title="前台、后台"></a>前台、后台</h3><p>判定标准：是否能与用户完成交互。</p><ul><li><p>&amp;：将进程放置到后台执行<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ firefox baidu.com&amp;</span><br><span class="line">[1] 10705</span><br></pre></td></tr></table></figure><p>其中10705是进程编号。</p></li><li><p>如果程序已经在执行，ctrl + z可以将程序调入后台。</p></li><li><p>jobs查看后台运行的进程</p></li><li><p>fg：恢复后台一个进程到前台执行。‘+’优先级高。指定某一个进程恢复到前台来。用jobs查看的“进程编号”。</p></li></ul><h3 id="关机重启：reboot、shutdown、init"><a href="#关机重启：reboot、shutdown、init" class="headerlink" title="关机重启：reboot、shutdown、init"></a>关机重启：reboot、shutdown、init</h3><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>reboot</td><td>重新启动操作系统</td></tr><tr><td>shutdown -r now</td><td>重新启动操作系统，shutdown会给别的用户提示</td></tr><tr><td>shutdown -h now</td><td>立刻关机，其中now相当于时间为0的状态</td></tr><tr><td>shutdown -h 20:25</td><td>系统在今天的20：25会关机</td></tr><tr><td>shutdown -h +10</td><td>系统再过10分钟后自动关机</td></tr><tr><td>init 0</td><td>关机</td></tr><tr><td>init 6</td><td>重启</td></tr></tbody></table><h3 id="查看或配置网卡信息：ifconfig"><a href="#查看或配置网卡信息：ifconfig" class="headerlink" title="查看或配置网卡信息：ifconfig"></a>查看或配置网卡信息：ifconfig</h3><p>如果我们只是输入：<code>ifconfig</code>，它会显示所有网卡的信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ ifconfig</span><br><span class="line">ens32: flags&#x3D;4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.193.133  netmask 255.255.255.0  broadcast 192.168.193.255</span><br><span class="line">        inet6 fe80::21b0:4003:d4a3:e37f  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:45:2d:e6  txqueuelen 1000  (以太网)</span><br><span class="line">        RX packets 1051  bytes 1122374 (1.1 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 655  bytes 88507 (88.5 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags&#x3D;73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (本地环回)</span><br><span class="line">        RX packets 420  bytes 30802 (30.8 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 420  bytes 30802 (30.8 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><table><thead><tr><th>显示字段</th><th>说明</th></tr></thead><tbody><tr><td>inet</td><td>ip地址</td></tr><tr><td>broadcast</td><td>广播地址</td></tr><tr><td>netmask</td><td>子网掩码</td></tr><tr><td>ether</td><td>网卡</td></tr><tr><td>RX bytes</td><td>接收数据字节统计</td></tr><tr><td>TX bytes</td><td>发送数据字节统计</td></tr></tbody></table><p>通过<code>ifconfig</code>配置网络参数：</p><ul><li>只有root才能用ifconfig配置参数，其他用户只能查看网络配置</li><li>ifconfig网络接口名称 [地址协议类型] [address] [参数]</li><li>地址协议类型如：inet(IPv4)，inet(IPv6)等</li><li>如：ifconfig eth0 inet 192.168.0.254 netmask 255.255.255.0 up</li></ul><p>常用参数：</p><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>-a</td><td>显示所有网络接口状态</td></tr><tr><td>inet [IP地址]</td><td>设置IP地址</td></tr><tr><td>netmask [子网掩码]</td><td>设置子网掩码</td></tr><tr><td>up</td><td>启用网络接口</td></tr><tr><td>down</td><td>关闭网络接口</td></tr></tbody></table><p>临时设置ip地址（系统重启失效）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ifconfig ens32 新ip</span><br></pre></td></tr></table></figure><p>使用命令 网卡启动、关闭：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ifconfig ens32 up&#x2F;down</span><br></pre></td></tr></table></figure><h3 id="测试远程主机连通性：ping"><a href="#测试远程主机连通性：ping" class="headerlink" title="测试远程主机连通性：ping"></a>测试远程主机连通性：ping</h3><ul><li>ping通过ICMP协议向远程主机发送ECHO_REQUEST请求，期望主机回复ECHO_REPLY消息。</li><li>通过ping命令可以检查是否与远程主机建立了TCP/IP连接。</li></ul><p>使用方法：ping [参数] 远程主机IP地址</p><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>-a</td><td>每次响应时都发出声音提示</td></tr><tr><td>-A</td><td>表示以实际往返响应时间为间隔，连续发送消息</td></tr><tr><td>-f</td><td>连续不断发送消息，不管是否收到响应</td></tr><tr><td>-n</td><td>只显示主机IP，不需要把IP解释成主机名</td></tr><tr><td>-c</td><td>发送指定次数的数据包信息后停止，<code>ping -c 5 baidu.com</code></td></tr><tr><td>-i</td><td>每次发送消息时间间隔，默认一秒，<code>ping -i 2 baidu.com</code></td></tr><tr><td>-s</td><td>分组数据大小，默认64字节</td></tr><tr><td>-w</td><td>以秒为单位的超时值，一旦超时，就立即停止</td></tr></tbody></table><p>运行过程中按 <code>ctrl + C</code>停止</p><h2 id="查找与检索"><a href="#查找与检索" class="headerlink" title="查找与检索"></a>查找与检索</h2><h3 id="根据文件名找文件：find"><a href="#根据文件名找文件：find" class="headerlink" title="根据文件名找文件：find"></a>根据文件名找文件：find</h3><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find 搜索目录位置 参数 &quot;关键字&quot;&#x2F;&#39;关键字&#39;</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><p>-name：按名称搜索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find .&#x2F; -name &quot;for*.sh&quot;</span><br></pre></td></tr></table></figure></li><li><p>-type：按类型搜索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find .&#x2F; -type f&#x2F;d&#x2F;l&#x2F;b&#x2F;c&#x2F;s&#x2F;p</span><br></pre></td></tr></table></figure></li><li><p>-size：按大小搜索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find ~&#x2F; -size +3M -size -8MM大写</span><br><span class="line">find ~&#x2F; -size +3k -size -8kk小写</span><br><span class="line">find ~&#x2F; -size +3 -size -8无单位，按扇区个数计算（一个扇区大小为512B(&#x3D;0.5k)）</span><br></pre></td></tr></table></figure></li><li><p>-maxdepth：按层级搜索，maxdepth后接数字代表深度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find .&#x2F; -maxdepth 1 -name &quot;*.sh&quot;</span><br></pre></td></tr></table></figure></li><li><p>-exec：对搜索结果，执行某些命令，执行的命令放在{}前</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find .&#x2F; -maxdepth 1 -name &quot;*.sh&quot; -exec ls -l &#123;&#125; \</span><br></pre></td></tr></table></figure></li><li><p>xargs：需要结合管道，将搜索结果指定给某个命令使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find .&#x2F; -type d | xargs ls -l</span><br></pre></td></tr></table></figure><h3 id="按文件内容找文件：grep"><a href="#按文件内容找文件：grep" class="headerlink" title="按文件内容找文件：grep"></a>按文件内容找文件：grep</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -R&#x2F;-r &quot;待搜索的内容&quot; 目录位置</span><br></pre></td></tr></table></figure><h3 id="find和grep命令结合"><a href="#find和grep命令结合" class="headerlink" title="find和grep命令结合"></a>find和grep命令结合</h3><p>先使用find命令查找文件，然后使用grep命令查找哪些文件包含某个字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name &quot;*.c&quot; | xargs grep -n &quot;main&quot;</span><br></pre></td></tr></table></figure><p>找寻当前目录下，包含”love”的文件，并显示在多少行出现（-n行号）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -maxdepth 1 -type &#39;f&#39; -print0 | xargs -0 grep &quot;love&quot; -n</span><br></pre></td></tr></table></figure><h1 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h1><h2 id="gedit编辑器"><a href="#gedit编辑器" class="headerlink" title="gedit编辑器"></a>gedit编辑器</h2><p>gedit是一个Linux环境下的文本编辑器，类似Windows下的写字板程序，在不需要特别复杂的编程环境下，作为基本的文本编辑器比较合适。</p><p>命令行打开：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gedit 文件名</span><br></pre></td></tr></table></figure><h2 id="vi-vim编辑器"><a href="#vi-vim编辑器" class="headerlink" title="vi/vim编辑器"></a>vi/vim编辑器</h2><h3 id="vi有三种工作模式"><a href="#vi有三种工作模式" class="headerlink" title="vi有三种工作模式"></a>vi有三种工作模式</h3><ul><li>命令模式：默认进入vim的工作模式。该种模式下，用户所有输入均被当成命令</li><li>编辑模式：编写模式，写代码、文本内容。。</li><li>末行模式：在命令模式下，按”:”进入末行模式。该种模式下，用户所有输入均被当成命令。</li></ul><h3 id="修改文件步骤："><a href="#修改文件步骤：" class="headerlink" title="修改文件步骤："></a>修改文件步骤：</h3><ol><li>shell→命令模式：<code>vi 文件名</code></li><li>命令模式→编辑模式：输入<code>i/a/o/s/I/A/O/S</code>后开始编辑内容</li><li>编辑模式→命令模式：按键盘ESC键</li><li>命令模式→末行模式：输入英文冒号 : </li><li>末行模式命令：<ul><li>w 保存</li><li>q 退出</li><li>q! 强制退出（不保存）</li><li>x 等同于wq（保存退出）</li></ul></li><li>执行一个非退出的末行命令后到命令模式：按ESC 2次</li><li>由命令模式直接退出到shell：连按两个大写Z——<code>ZZ</code>相当于<code>:wq</code>保存退出</li></ol><p><img src= "/img/loading.gif" data-lazy-src="8c3f/luojitu.png" alt="luojitu"></p><h3 id="光标移动（命令模式）：h-j-k-l"><a href="#光标移动（命令模式）：h-j-k-l" class="headerlink" title="光标移动（命令模式）：h-j-k-l"></a>光标移动（命令模式）：h-j-k-l</h3><ul><li>h：左</li><li>j：下</li><li>k：上</li><li>L：右</li></ul><h3 id="转换编辑模式：i-a-o-s—I-A-O-S"><a href="#转换编辑模式：i-a-o-s—I-A-O-S" class="headerlink" title="转换编辑模式：i/a/o/s—I/A/O/S"></a>转换编辑模式：i/a/o/s—I/A/O/S</h3><p>小写字符：</p><ul><li>i：向光标所在位置的“前面”插入数据</li><li>a：向光标所在位置的“后面”插入数据</li><li>o：向光标所在位置的“下一行”插入数据</li><li>s：以删除光标位置一个字符为代价，修改工作模式——文本编辑模式</li></ul><p>大写字符：</p><ul><li>O：向光标所在位置的“上一行”插入数据</li><li>I：向光标所在位置的“行首”插入数据</li><li>A：向光标所在位置的“行尾”插入数据</li><li>S：以删除光标位置一整行为代价，修改工作模式——文本编辑模式</li></ul><h3 id="复制、粘贴文本"><a href="#复制、粘贴文本" class="headerlink" title="复制、粘贴文本"></a>复制、粘贴文本</h3><ul><li>yy：复制光标所在行</li><li>Nyy：复制光标所在往后的N行（包括本行）</li><li>p：粘贴至光标所在位置，下一行</li><li>P(大写)：粘贴至光标所在位置，上一行</li><li>yw：将光标放置于单词的首字符上，复制一个单词</li><li>区域复制：将光标放置于待复制区域的首字符上，按“v”（左下角出现“可视”提示）使用h，j，k，l 选择复制区域</li></ul><h3 id="剪切、粘贴文本"><a href="#剪切、粘贴文本" class="headerlink" title="剪切、粘贴文本"></a>剪切、粘贴文本</h3><ul><li>dd：剪切光标所在行</li><li>Ndd：剪切光标所在往后的N行（包括本行）</li><li>p：粘贴至光标所在位置，下一行</li><li>P(大写)：粘贴至光标所在位置，上一行</li><li>dw：将光标放置于单词的首字符上，剪切一个单词</li><li>区域复制：将光标放置于待剪切区域的首字符上，按“v”（左下角出现“可视”提示）使用h，j，k，l 选择剪切区域</li><li>d0：从光标所在位置，删除到行首</li><li>d$(D)：从光标所在位置，删除到行尾</li></ul><h3 id="删除文本"><a href="#删除文本" class="headerlink" title="删除文本"></a>删除文本</h3><p>同剪切。</p><h3 id="字符操作"><a href="#字符操作" class="headerlink" title="字符操作"></a>字符操作</h3><ul><li>x：删除光标选中字符</li><li>r：光标选中字符，按“r“，按目标字符，可以将原字符替换为目标字符</li></ul><h3 id="跳转到指定行"><a href="#跳转到指定行" class="headerlink" title="跳转到指定行"></a>跳转到指定行</h3><p>命令模式：</p><ul><li>gg：第一行</li><li>G：最后一行</li><li>gg = G 自动排版</li><li>NG：跳转到第N行</li><li><code>vim hello.go 10</code>——打开文件同时，跳转到10行</li></ul><p>末行模式：</p><ul><li>:N 回车——跳转到第N行</li></ul><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><ol><li>想象一个单词查找。输入”/“（显示在末行的位置），再输入要查找的单词。</li><li>查找一个已经看到的单词，将光标放在该单词任意一个字符， ”*“向后找，”#“向前找，”n“代表下一个。</li></ol><h3 id="撤销：u"><a href="#撤销：u" class="headerlink" title="撤销：u"></a>撤销：u</h3><h3 id="反撤销：ctrl-r"><a href="#反撤销：ctrl-r" class="headerlink" title="反撤销：ctrl + r"></a>反撤销：ctrl + r</h3><h3 id="替换——末行模式"><a href="#替换——末行模式" class="headerlink" title="替换——末行模式"></a>替换——末行模式</h3><ol><li><p>单行替换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:s&#x2F;旧单词&#x2F;新单词</span><br></pre></td></tr></table></figure><p>一行中有多个”旧单词“，使用”g“。否则只替换一行的首个</p></li><li><p>通篇替换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s&#x2F;旧单词&#x2F;新单词</span><br></pre></td></tr></table></figure><p>一行中有多个”旧单词“，使用”g“。否则只替换一行的首个</p></li><li><p>指定区域替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:n,ms&#x2F;旧单词&#x2F;新单词</span><br></pre></td></tr></table></figure><p>替换从n行开始，到m行结束，出现的”旧单词“，一行有多个”旧单词“，使用”g“。否则只替换一行的首个。</p></li></ol><h3 id="vim的配置"><a href="#vim的配置" class="headerlink" title="vim的配置"></a>vim的配置</h3><ul><li>用户配置：用户宿主目录下，创建.vimrc（隐藏文件），写入配置项。</li><li>系统配置：sudo vi /etc/vim/vimrc（非隐藏文件），写入配置项。</li></ul><h1 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h1><h2 id="SSH介绍"><a href="#SSH介绍" class="headerlink" title="SSH介绍"></a>SSH介绍</h2><p>SSH为Secure Shell的缩写，有IETF的网络工作小组（Network Working Group）所制定；SSH为建立在应用层和传输层基础上的安全协议。</p><p>SSH是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。常用于远程登录，以及用户之间进行资料拷贝。</p><p>利用SSH协议可以有效放置远程管理过程中的心里泄露问题。SSH最初是UNIX系统上的一个程序，后来又迅速扩展到其他操作平台。SSH在正确使用时可弥补网络中的漏洞。SSH客户端适用于多种平台。几乎所有UNIX平台——包括HP-UX、Linux、AIX、Splaris、Digital UNIX、Irix，以及其他平台，都可运行SSH。</p><p>如果使用SSH服务，需要安装相应的服务器和客户端。客户端和服务器的关系：如果A机器想被B机器远程控制，那么A机器需要安装SSH服务器，B机器需要安装SSH客户端。</p><h2 id="测试本地是否安装有SSH客户端"><a href="#测试本地是否安装有SSH客户端" class="headerlink" title="测试本地是否安装有SSH客户端"></a>测试本地是否安装有SSH客户端</h2><p>运行<code>sudo aptitude show ssh</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ sudo aptitude show ssh</span><br><span class="line">软件包： ssh                     </span><br><span class="line">版本号： 1:7.6p1-4ubuntu0.3</span><br><span class="line">状态: 未安装</span><br><span class="line">优先级： 可选</span><br><span class="line">部分： net</span><br><span class="line">维护者： Ubuntu Developers &lt;ubuntu-devel-discuss@lists.ubuntu.com&gt;</span><br><span class="line">体系： all</span><br><span class="line">未压缩尺寸： 106 k</span><br><span class="line">依赖于: openssh-client (&gt;&#x3D; 1:7.6p1-4ubuntu0.3), openssh-server (&gt;&#x3D;</span><br><span class="line">     1:7.6p1-4ubuntu0.3)</span><br><span class="line">预依赖于: dpkg (&gt;&#x3D; 1.17.5)</span><br><span class="line">描述： secure shell client and server (metapackage)</span><br><span class="line"> This metapackage is a convenient way to install both the OpenSSH client and the</span><br><span class="line"> OpenSSH server. It provides nothing in and of itself, so you may remove it if</span><br><span class="line"> nothing depends on it.</span><br><span class="line">主页： http:&#x2F;&#x2F;www.openssh.com&#x2F;</span><br></pre></td></tr></table></figure><p>检测到未安装，开始安装<code>ssh</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo aptitude install ssh</span><br></pre></td></tr></table></figure><p>安装完毕后即可使用ssh。</p><h2 id="Linux平台相互远程登录"><a href="#Linux平台相互远程登录" class="headerlink" title="Linux平台相互远程登录"></a>Linux平台相互远程登录</h2><p>操作命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -l username hostip</span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh username@hostip</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-l</td><td>选项，是字母”l“，不是数字”1“</td></tr><tr><td>username</td><td>被远程登录的用户名</td></tr><tr><td>hostip</td><td>被远程登录的ip地址</td></tr></tbody></table><p><strong>注意</strong>：远程登录的两台机器必须要能ping通。</p><h2 id="Linux平台相互传输"><a href="#Linux平台相互传输" class="headerlink" title="Linux平台相互传输"></a>Linux平台相互传输</h2><p>SSH提供了一些命令和shell用来登录远程服务器。在默认情况下不允许用户拷贝文件，但还是提供了一个”scp“命令。</p><p>Linux远程发送本地文件给Linux：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scp -r 本地文件 目标用户名@目标主机名:目标存储的绝对路径</span><br><span class="line">例如：</span><br><span class="line">scp -r .&#x2F;test.mp3 zhangsan@192.168.35.221:&#x2F;home&#x2F;zhangsan&#x2F;test</span><br></pre></td></tr></table></figure><p>——输入目标主机密码。</p><p>文件直接存在目标主机的指定目录下。</p><h1 id="Ubuntu中常用快捷键"><a href="#Ubuntu中常用快捷键" class="headerlink" title="Ubuntu中常用快捷键"></a>Ubuntu中常用快捷键</h1><ul><li><p>ctrl + alt + ↓或↑ ——虚拟一块新桌面</p></li><li><p>ctrl + alt + t ——唤醒一个新终端（独立）</p></li><li><p>ctrl + shift + t ——在一个终端里，创建多个shell标签</p></li><li><p>ctrl + d ——快速关闭终端窗口</p></li><li><p>ctrl + u ——清空输入内容</p></li><li><p>ctrl + alt + F3 ——切换到字符界面</p></li><li><p>ctrl + alt + F1 ——切换到图形界面</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Trojan安装使用</title>
      <link href="article/ffcf.html"/>
      <url>article/ffcf.html</url>
      
        <content type="html"><![CDATA[<h1 id="搭建Trojan安装使用"><a href="#搭建Trojan安装使用" class="headerlink" title="搭建Trojan安装使用"></a>搭建Trojan安装使用</h1><p>Trojan是一个穿透连接协议，相较于shadowsocksr来说，不使用自定义的加密协议来隐藏自身。相反，使用特征明显的TLS协议(TLS/SSL)，使得流量看起来与正常的HTTPS网站相同。TLS是一个成熟的加密体系，HTTPS即使用TLS承载HTTP流量。使用<strong>正确配置</strong>的加密TLS隧道，可以保证传输的</p><ul><li>保密性（无法得知传输的内容）</li><li>完整性（一旦有人试图篡改传输的密文，通讯双方都会发现）</li><li>不可抵赖（外人无法伪造身份冒充服务端或者客户端）</li><li>前向安全（即使密钥泄露，也无法解密先前的加密流量）</li></ul><h1 id="基础设备"><a href="#基础设备" class="headerlink" title="基础设备"></a>基础设备</h1><ul><li>系统 Centos7.x(不熟悉linux系统的建议选用centos7的任意版本，其他linux系统安装时会出现一部分问题)</li><li>一台服务器（建议别用生产环境）</li><li>一个域名</li></ul><h1 id="安装Trojan"><a href="#安装Trojan" class="headerlink" title="安装Trojan"></a>安装Trojan</h1><h2 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h2><p>首先需要连接上服务器，建议使用Xshell进行连接，<a href="https://www.xshellcn.com/">Xshell官网</a>有可供个人使用的免费版，自行下载即可。</p><h2 id="运行安装脚本"><a href="#运行安装脚本" class="headerlink" title="运行安装脚本"></a>运行安装脚本</h2><p>登录进服务器后，首先将命令行sudo为管理员权限，输入以下代码进行脚本安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -O https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;atrandys&#x2F;trojan&#x2F;master&#x2F;trojan_centos7.sh &amp;&amp; chmod +x trojan_centos7.sh &amp;&amp; .&#x2F;trojan_centos7.sh</span><br></pre></td></tr></table></figure><p>之后选1，回车，等待一下。过程中会提示需要输入域名，输入解析到本VPS的域名，然后回车。<br>等待之后，会出现安装完成的信息，是一个指向你域名下的一个下载链接，右键选中复制下来，然后粘贴进浏览器下载，下载下来是一个trojan-cil压缩包，解压点开文件夹下usr-&gt;src-&gt;trojan-cil-&gt;config.json，记下remote_addr, remote_addr, password三项。</p><h2 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h2><p>到这时候，用任意一个浏览器输入你刚才注册的域名，应该就可以看到一个博客界面的网站。</p><h1 id="启用BBR加速"><a href="#启用BBR加速" class="headerlink" title="启用BBR加速"></a>启用BBR加速</h1><p>关于BBR加速不多介绍了，有兴趣可以自行搜索，总之就是启用BBR加速后你的连接速度会是启用前的好几倍。</p><p>在Xshell中输入下面的代码安装BBR加速。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;src &amp;&amp; wget -N --no-check-certificate &quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;chiakge&#x2F;Linux-NetSpeed&#x2F;master&#x2F;tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; .&#x2F;tcp.sh</span><br></pre></td></tr></table></figure><p>在弹出的界面选1，安装内核，安装完之后vps会重启，putty会断开连接，重启等待1到2分钟，在重复刚才的步骤用putty登陆vps，输入以下代码，在弹出的界面输入5，使用BBR。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;src &amp;&amp; .&#x2F;tcp.sh</span><br></pre></td></tr></table></figure><p>之后显示BBR启动成功，这样我们服务端架设的步骤就完全完成了。</p><h1 id="客户端的使用"><a href="#客户端的使用" class="headerlink" title="客户端的使用"></a>客户端的使用</h1><p>推荐使用<a href="https://github.com/Trojan-Qt5/Trojan-Qt5">Trojan-Qt5</a>，具体的下载地址请查看Github。</p>]]></content>
      
      
      <categories>
          
          <category> VPN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Trojan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo音乐插件、豆瓣电影插件、哔哩哔哩番剧插件安装使用</title>
      <link href="article/feae.html"/>
      <url>article/feae.html</url>
      
        <content type="html"><![CDATA[<h1 id="hexo音乐插件、豆瓣电影插件、哔哩哔哩番剧插件安装使用"><a href="#hexo音乐插件、豆瓣电影插件、哔哩哔哩番剧插件安装使用" class="headerlink" title="hexo音乐插件、豆瓣电影插件、哔哩哔哩番剧插件安装使用"></a>hexo音乐插件、豆瓣电影插件、哔哩哔哩番剧插件安装使用</h1><p>今天准备完善一下自己的hexo博客网站，根据自己的习惯并且参照大佬的博客进行设置，实现博客中嵌入页面播放音乐、豆瓣电影、豆瓣读书和豆瓣游戏、哔哩哔哩番剧等等内容，废话不多说，现在开始安排。</p><h1 id="音乐播放插件"><a href="#音乐播放插件" class="headerlink" title="音乐播放插件"></a>音乐播放插件</h1><p>本文参考的hexo嵌入式插件为<a href="https://github.com/MoePlayer/hexo-tag-aplayer">hexo-tag-aplayer</a>，该项目有中文文档，本博客采用的是MeingJS支持版本，播放器将支持对于 QQ音乐、网易云音乐、虾米、酷狗、百度等平台的音乐播放。</p><h2 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>npm install --save hexo-tag-aplayer</code></p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><ul><li>APlayer.js &gt; 1.8.0</li><li>Meting.js &gt; 1.1.1</li></ul><h2 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h2><h3 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h3><p>在 Hexo 配置文件 <code>_config.yml</code> 中设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="页面修改"><a href="#页面修改" class="headerlink" title="页面修改"></a>页面修改</h3><p>首先我们需要创建加载音乐播放器的界面，在站点根目录添加标签页：</p><p><code>hexo new page music</code></p><p>找到生成的music文件夹，打开其中的index.md文件，将下面的代码复制进去保存</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 简单示例 (id, server, type)  --&gt;</span></span><br><span class="line">&#123;% meting &quot;60198&quot; &quot;netease&quot; &quot;playlist&quot; %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 进阶示例 --&gt;</span></span><br><span class="line">&#123;% meting &quot;60198&quot; &quot;netease&quot; &quot;playlist&quot; &quot;autoplay&quot; &quot;mutex:false&quot; &quot;listmaxheight:340px&quot; &quot;preload:none&quot; &quot;theme:#ad7a86&quot;%&#125;</span><br></pre></td></tr></table></figure><p>简单示例和进阶示例使用一个即可</p><h3 id="标签参数"><a href="#标签参数" class="headerlink" title="标签参数"></a>标签参数</h3><table><thead><tr><th>选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td><strong>必须值</strong></td><td>歌曲 id / 播放列表 id / 相册 id / 搜索关键字</td></tr><tr><td>server</td><td><strong>必须值</strong></td><td>音乐平台: <code>netease</code>, <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code></td></tr><tr><td>type</td><td><strong>必须值</strong></td><td><code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, <code>artist</code></td></tr><tr><td>fixed</td><td><code>false</code></td><td>开启固定模式</td></tr><tr><td>mini</td><td><code>false</code></td><td>开启迷你模式</td></tr><tr><td>loop</td><td><code>all</code></td><td>列表循环模式：<code>all</code>, <code>one</code>,<code>none</code></td></tr><tr><td>order</td><td><code>list</code></td><td>列表播放模式： <code>list</code>, <code>random</code></td></tr><tr><td>volume</td><td>0.7</td><td>播放器音量</td></tr><tr><td>lrctype</td><td>0</td><td>歌词格式类型</td></tr><tr><td>listfolded</td><td><code>false</code></td><td>指定音乐播放列表是否折叠</td></tr><tr><td>storagename</td><td><code>metingjs</code></td><td>LocalStorage 中存储播放器设定的键名</td></tr><tr><td>autoplay</td><td><code>true</code></td><td>自动播放，移动端浏览器暂时不支持此功能</td></tr><tr><td>mutex</td><td><code>true</code></td><td>该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td></tr><tr><td>listmaxheight</td><td><code>340px</code></td><td>播放列表的最大长度</td></tr><tr><td>preload</td><td><code>auto</code></td><td>音乐文件预载入模式，可选项： <code>none</code>, <code>metadata</code>, <code>auto</code></td></tr><tr><td>theme</td><td><code>#ad7a86</code></td><td>播放器风格色彩设置</td></tr></tbody></table><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>在git界面进行 <code>hexo cl</code>、<code>hexo g</code>和<code>hexo s</code>即可使用</p><p>部署成功后样式如下</p><p><img src= "/img/loading.gif" data-lazy-src="feae/Snipaste_2020-05-27_19-58-09.png"></p><h1 id="豆瓣电影、读书和游戏插件"><a href="#豆瓣电影、读书和游戏插件" class="headerlink" title="豆瓣电影、读书和游戏插件"></a>豆瓣电影、读书和游戏插件</h1><p>本文参照<a href="https://github.com/mythsman/hexo-douban">hexo-douban</a></p><p>一个在 <a href="https://hexo.io/">Hexo</a> 页面中嵌入豆瓣个人主页的小插件.</p><h2 id="安装方式-1"><a href="#安装方式-1" class="headerlink" title="安装方式"></a>安装方式</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-douban --save</span><br></pre></td></tr></table></figure><h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><ol><li>修改package.json内hexo-douban的版本号至最新</li><li>重新安装最新版本<code>npm install hexo-douban --save</code></li></ol><p>或者使用<code>npm install hexo-douban --update --save</code>直接更新。</p><h2 id="配置更改"><a href="#配置更改" class="headerlink" title="配置更改"></a>配置更改</h2><h3 id="站点配置修改"><a href="#站点配置修改" class="headerlink" title="站点配置修改"></a>站点配置修改</h3><p>将下面的配置写入站点的配置文件 <code>_config.yml</code> 里(不是主题的配置文件).</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">douban:</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">mythsman</span></span><br><span class="line">  <span class="attr">builtin:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">book:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;This is my book title&#x27;</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">&#x27;This is my book quote&#x27;</span></span><br><span class="line">  <span class="attr">movie:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;This is my movie title&#x27;</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">&#x27;This is my movie quote&#x27;</span></span><br><span class="line">  <span class="attr">game:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;This is my game title&#x27;</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">&#x27;This is my game quote&#x27;</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">10000</span> </span><br></pre></td></tr></table></figure><ul><li><strong>user</strong>: 你的豆瓣ID.打开豆瓣，登入账户，然后在右上角点击 “个人主页” ，这时候地址栏的URL大概是这样：”<a href="https://www.douban.com/people/xxxxxx/&quot;">https://www.douban.com/people/xxxxxx/&quot;</a> ，其中的”xxxxxx”就是你的个人ID了。</li><li><strong>builtin</strong>: 是否将生成页面的功能嵌入<code>hexo s</code>和<code>hexo g</code>中，默认是<code>false</code>,另一可选项为<code>true</code>(1.x.x版本新增配置项)。</li><li><strong>title</strong>: 该页面的标题.</li><li><strong>quote</strong>: 写在页面开头的一段话,支持html语法.</li><li><strong>timeout</strong>: 爬取数据的超时时间，默认是 10000ms ,如果在使用时发现报了超时的错(ETIMEOUT)可以把这个数据设置的大一点。</li></ul><p>如果只想显示某一个页面(比如movie)，那就把其他的配置项注释掉即可。</p><h3 id="主题菜单选项修改"><a href="#主题菜单选项修改" class="headerlink" title="主题菜单选项修改"></a>主题菜单选项修改</h3><p>在主题的配置文件 <code>_config.yml</code> 里添加如下配置来为这些页面添加菜单链接.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Home:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">Archives:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="attr">Books:</span> <span class="string">/books</span>     <span class="comment">#This is your books page</span></span><br><span class="line">  <span class="attr">Movies:</span> <span class="string">/movies</span>   <span class="comment">#This is your movies page</span></span><br><span class="line">  <span class="attr">Games:</span> <span class="string">/games</span>   <span class="comment">#This is your games page</span></span><br></pre></td></tr></table></figure><h2 id="使用方式-1"><a href="#使用方式-1" class="headerlink" title="使用方式"></a>使用方式</h2><h3 id="生成界面"><a href="#生成界面" class="headerlink" title="生成界面"></a>生成界面</h3><p>现在默认安装的都是1.x.x版本。</p><p>在1.x.x版本中，使用<code>hexo douban</code>命令即可生成指定页面，如果不加参数，那么默认参数为<code>-bgm</code>。</p><p><strong>需要注意的是</strong>，通常大家都喜欢用<code>hexo d</code>来作为<code>hexo deploy</code>命令的简化，但是当安装了<code>hexo douban</code>之后，就不能用<code>hexo d</code>了，因为<code>hexo douban</code>跟<code>hexo deploy</code>的前缀都是<code>hexo d</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ hexo douban -h</span><br><span class="line">Usage: hexo douban</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line">Generate pages from douban</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -b, --books   Generate douban books only</span><br><span class="line">  -g, --games   Generate douban games only</span><br><span class="line">  -m, --movies  Generate douban movies only</span><br></pre></td></tr></table></figure><p>如果配置了<code>builtin</code>参数为<code>true</code>，那么除了可以使用<code>hexo douban</code>命令之外，<code>hexo g</code>或<code>hexo s</code>也内嵌了生成页面的功能。</p><h3 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h3><p>如果上面的配置和操作都没问题，就可以在生成站点之后打开 <code>//yourblog/books</code> 和 <code>//yourblog/movies</code>, <code>//yourblog/games</code>, 来查看结果.</p><h1 id="哔哩哔哩番剧页面插件"><a href="#哔哩哔哩番剧页面插件" class="headerlink" title="哔哩哔哩番剧页面插件"></a>哔哩哔哩番剧页面插件</h1><p>本文参照<a href="https://github.com/HCLonely/hexo-bilibili-bangumi">hexo-bilibili-bangumi</a>，提供哔哩哔哩的个人番剧页的展示。</p><h2 id="安装方式-2"><a href="#安装方式-2" class="headerlink" title="安装方式"></a>安装方式</h2><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><p><code>npm install hexo-bilibili-bangumi --save</code></p><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p><code>npm install hexo-bilibili-bangumi --update --sav</code></p><h2 id="配置修改-1"><a href="#配置修改-1" class="headerlink" title="配置修改"></a>配置修改</h2><h3 id="站点配置文件修改"><a href="#站点配置文件修改" class="headerlink" title="站点配置文件修改"></a>站点配置文件修改</h3><p>将下面的配置写入站点的配置文件 <code>_config.yml</code> 里(不是主题的配置文件).</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">bangumi:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">path:</span> </span><br><span class="line">  <span class="attr">vmid:</span> </span><br><span class="line">  <span class="attr">title:</span> <span class="string">&#x27;追番列表&#x27;</span></span><br><span class="line">  <span class="attr">quote:</span> <span class="string">&#x27;生命不息，追番不止！&#x27;</span></span><br><span class="line">  <span class="attr">show:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">loading:</span> </span><br></pre></td></tr></table></figure><h3 id="标签参数-1"><a href="#标签参数-1" class="headerlink" title="标签参数"></a>标签参数</h3><ul><li><strong>enable</strong>: 是否启用</li><li><strong>path</strong>: 番剧页面路径，默认<code>bangumis/index.html</code></li><li><strong>vmid</strong>: 哔哩哔哩番剧页面的 <code>vmid(uid)</code>,<a href="https://github.com/HCLonely/hexo-bilibili-bangumi#%E8%8E%B7%E5%8F%96uid">如何获取？</a></li><li><strong>title</strong>: 该页面的标题</li><li><strong>quote</strong>: 写在页面开头的一段话,支持html语法</li><li><strong>show</strong>: 初始显示页面：<code>0: 想看</code>, <code>1: 在看</code>, <code>2: 看过</code>，默认为<code>1</code></li><li><strong>loading</strong>: 图片加载完成前的loading图片</li></ul><h2 id="获取uid"><a href="#获取uid" class="headerlink" title="获取uid"></a>获取uid</h2><p>登录哔哩哔哩后前往<a href="https://space.bilibili.com/%E9%A1%B5%E9%9D%A2%EF%BC%8C%E7%BD%91%E5%9D%80%E6%9C%80%E5%90%8E%E7%9A%84%E4%B8%80%E4%B8%B2%E6%95%B0%E5%AD%97%E5%B0%B1%E6%98%AF">https://space.bilibili.com/页面，网址最后的一串数字就是</a> <code>uid</code></p><p><strong><em>需要将追番列表设置为公开！</em></strong></p><h2 id="使用方式-2"><a href="#使用方式-2" class="headerlink" title="使用方式"></a>使用方式</h2><ol><li>在<code>hexo generate</code>或<code>hexo deploy</code>之前使用<code>hexo bangumi -u</code>命令更新番剧数据！</li><li>删除数据命令:<code>hexo bangumi -d</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+github/coding搭建博客详细步骤(包含同时上传)</title>
      <link href="article/add.html"/>
      <url>article/add.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>首先理一下逻辑，我们的目的是搭建一个能够自己使用，并且文章内容在一个较长的时间段内都能被访问的博客。经过我计算一波发现最多只需要花费一份买域名的钱，服务器的花销都不用考虑了（基本纯白嫖）。</p><p>相对靠谱的我选择了国外的GitHub和国内的coding两个代码托管平台，一个是便于永久保存自己的代码，一个是便于国内访问自己的网站。</p><p>现在coding转到腾讯云的静态了，每个月虽然有免费额度但还是感觉白嫖不够爽，这里我推荐一个平台vercel，个人永久免费（除非vercel破产），官网地址：<a href="https://vercel.com/">https://vercel.com</a></p><blockquote><p>如果我的文章有错误的内容，请评论区留言提醒我，收到后我会尽快修改，谢谢支持！</p></blockquote><h1 id="GitHub和coding配置"><a href="#GitHub和coding配置" class="headerlink" title="GitHub和coding配置"></a>GitHub和coding配置</h1><p>由于两者都是代码托管平台，内容都差不多，平台的初步配置先写道一起，如果你已经创建好仓库请直接跳过此章节。</p><h2 id="GitHub配置"><a href="#GitHub配置" class="headerlink" title="GitHub配置"></a>GitHub配置</h2><h3 id="GitHub账号注册"><a href="#GitHub账号注册" class="headerlink" title="GitHub账号注册"></a>GitHub账号注册</h3><p>首先进行账号注册，我们可以访问<a href="https://github.com/">github.com</a>进行注册账号，如下：</p><p><img src= "/img/loading.gif" data-lazy-src="add/sign1.png"></p><p>英语不太好的同学可以使用谷歌浏览器打开，右键翻译成中文即可。</p><p>按照官网的提示进行创建账号，创建完毕后再次访问<a href="https://github.com/">github.com</a>进入主页。</p><p>网站会提示我们验证电子邮件，我们登录对应的邮箱来打开验证链接即可，完成验证后我们的账号就注册成功啦！</p><h3 id="GitHub-Pages的创建"><a href="#GitHub-Pages的创建" class="headerlink" title="GitHub Pages的创建"></a>GitHub Pages的创建</h3><p>完成账号注册后，我们开始创建一个用来存储网站的仓库。】</p><p>打开仓库选项：</p><p><img src= "/img/loading.gif" data-lazy-src="add/sign2.png"></p><p>创建一个新仓库：</p><p><img src= "/img/loading.gif" data-lazy-src="add/sign3.png"></p><p><img src= "/img/loading.gif" data-lazy-src="add/sign4.png"></p><p>点击创建按钮完成创建，这时我们的博客仓库就建立成功了，访问<code>https://&lt;用户名&gt;.github.io</code>即可访问我们自己的博客，由于现在还没有上传内容，所以只能看md文件的内容，搭建博客步骤请依次看后续章节。</p><h2 id="coding的配置"><a href="#coding的配置" class="headerlink" title="coding的配置"></a>coding的配置</h2><p>为了国内用户访问方便，我们可以将网站部署在coding</p><h3 id="coding账号注册"><a href="#coding账号注册" class="headerlink" title="coding账号注册"></a>coding账号注册</h3><p>coding账号注册请访问coding官网<a href="https://coding.net/%EF%BC%8C%E6%8C%89%E7%85%A7%E6%8F%90%E7%A4%BA%E6%93%8D%E4%BD%9C%E5%8D%B3%E5%8F%AF%E3%80%82">https://coding.net/，按照提示操作即可。</a></p><h3 id="coding创建仓库"><a href="#coding创建仓库" class="headerlink" title="coding创建仓库"></a>coding创建仓库</h3><p>登录到coding页面后，我们先创建自己的项目</p><p><img src= "/img/loading.gif" data-lazy-src="add/coding2.png"></p><p><img src= "/img/loading.gif" data-lazy-src="add/coding3.png"></p><p><img src= "/img/loading.gif" data-lazy-src="add/coding4.png"></p><p><img src= "/img/loading.gif" data-lazy-src="add/coding5.png"></p><p>点击<code>静态网站</code>，进入后再点击<code>立即发布静态网站</code></p><p><img src= "/img/loading.gif" data-lazy-src="add/coding6.png"></p><p>点击保存即可建立好新网站。</p><p>此时仓库内没有任何文件，我们需要完成后续操作为网站增加内容。</p><h1 id="本地环境搭配与hexo静态博客框架搭建"><a href="#本地环境搭配与hexo静态博客框架搭建" class="headerlink" title="本地环境搭配与hexo静态博客框架搭建"></a>本地环境搭配与hexo静态博客框架搭建</h1><p>本文操作环境为Windows系统，Linux或其他系统操作指令大同小异，可进行相应参考。</p><h2 id="本地环境搭建"><a href="#本地环境搭建" class="headerlink" title="本地环境搭建"></a>本地环境搭建</h2><p>为了方便hexo框架的搭建，仅需要安装以下程序即可：</p><ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li></ul><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><ul><li>Windows：下载并安装 <a href="https://git-scm.com/download/win">git</a>.</li><li>Mac：使用 <a href="http://mxcl.github.com/homebrew/">Homebrew</a>, <a href="http://www.macports.org/">MacPorts</a> 或者下载 <a href="http://sourceforge.net/projects/git-osx-installer/">安装程序</a>。</li><li>Linux (Ubuntu, Debian)：sudo apt-get install git-core</li><li>Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core</li></ul><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>Node.js 为大多数平台提供了官方的 <a href="https://nodejs.org/en/download/">安装程序</a>，参考官方即可。</p><h2 id="hexo静态博客框架搭建"><a href="#hexo静态博客框架搭建" class="headerlink" title="hexo静态博客框架搭建"></a>hexo静态博客框架搭建</h2><p>等基础环境Node.js和Git都安装完后，可以在cmd中进行查看版本号进行验证：</p><p><img src= "/img/loading.gif" data-lazy-src="add/1.png" alt="enter description here"></p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><ul><li>因为国外链接下载太慢，这里我们先安装一个npm的国内镜像源cnpm，往后的npm操作都可以用cnpm来代替，下载速度很快</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装完后使用<code>cnpm -v</code> 验证一下</p><h3 id="生成一个博客"><a href="#生成一个博客" class="headerlink" title="生成一个博客"></a>生成一个博客</h3><p>将以上的hexo安装完毕后，进入我们的项目文件夹（自己找地方建一个文件夹进去），右键鼠标找到 Git Bash Here 点击打开Git操作界面：</p><p><img src= "/img/loading.gif" data-lazy-src="add/2.png" alt="enter description here"></p><p>在打开的界面中输入指令：</p><ol><li><p>先进行初始化，输入 <code>hexo init &lt;目标文件夹&gt;</code>，若不填写目标文件夹，则默认是当前路径。</p><p>这时会从github拉取一个hexo的模板下载至本地，我们在目标文件夹下可以看到新添内容</p></li><li><p>启动本地预览 <code>hexo s</code></p><p><img src= "/img/loading.gif" data-lazy-src="add/3.png"></p><p>此时可以打开浏览器，输入 <code>localhost:4000</code> 即可进行查看，ctrl+c关闭</p></li><li><p>生成一篇新文章 <code>hexo n &quot;文章名&quot;</code></p></li><li><p>清理缓存 <code>hexo clean</code></p></li><li><p>同步新添内容，生成一下 <code>hexo g</code> </p></li><li><p>再次运行<code>hexo s</code>即可进行查看博客内容</p></li></ol><p>以上便为生成一个博客的基础指令。</p><h3 id="将博客改为自定义主题"><a href="#将博客改为自定义主题" class="headerlink" title="将博客改为自定义主题"></a>将博客改为自定义主题</h3><ol><li>选择一个主题的博客克隆到本地，可以直接在当前博客根目录处运行<code>git clone &lt;主题github地址&gt; &lt;目录(默认当前)&gt;</code></li></ol><blockquote><p>   下载完毕后，将克隆到本地的地址剪切到<code>themes</code>文件夹下</p></blockquote><ol start="2"><li><p>修改博客站点目录的_config.yml文件，将”theme”后改为新下载的主题名称</p></li><li><p><code>hexo clean</code>清理一下</p></li><li><p><code>hexo g</code>生成一下</p></li><li><p><code>hexo s</code>查看本地运行情况</p></li></ol><h1 id="将本地博客推送到GitHub和coding"><a href="#将本地博客推送到GitHub和coding" class="headerlink" title="将本地博客推送到GitHub和coding"></a>将本地博客推送到GitHub和coding</h1><p>由于需要同时登录两个平台，所以登录邮箱一定要保持一致，下面通过SSH进行push代码至相应平台</p><h2 id="生成SSH-KEY进行登录"><a href="#生成SSH-KEY进行登录" class="headerlink" title="生成SSH KEY进行登录"></a>生成SSH KEY进行登录</h2><h3 id="创建RSA密钥对"><a href="#创建RSA密钥对" class="headerlink" title="创建RSA密钥对"></a>创建RSA密钥对</h3><p>使用 Git Bash 生成 RSA 密钥对：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -<span class="selector-tag">b</span> <span class="number">4096</span> -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure><p>出现提示的时候意思是设置私人密码，设置密码后提交代码时需要输入这些密码进行验证，不想再输入的话直接连续三次回车，就创建完成了。</p><p>接着将 ~/.ssh 目录下将里边的 id_rsa.pub 文件里的内容复制到剪切板。</p><h3 id="Github-配置-SSH-key"><a href="#Github-配置-SSH-key" class="headerlink" title="Github 配置 SSH key"></a>Github 配置 SSH key</h3><p>登陆 Github 的账号：</p><ol><li>进入 Settings 页面</li><li>选择 SSH and GPG keys</li><li>点击 New SSH key</li><li>填写 Title（用来给公钥起一个名字，以便和其他的公钥区分开来）</li><li>然后在 Key 里将我们刚刚复制的公钥复制进去</li><li>最后点击 Add SSH key，这时候 GitHub 会要你输入账号密码进行确认。</li></ol><h3 id="Coding-net-配置-SSH-key"><a href="#Coding-net-配置-SSH-key" class="headerlink" title="Coding.net 配置 SSH key"></a>Coding.net 配置 SSH key</h3><p>Coding.net 和 Github 有些不一样，Coding.net存在账户公钥和部署公钥；</p><ul><li>账户公钥配置后拥有账户下所有项目的读写权限</li><li>部署公钥配置后默认拥有该项目的只读权限，如果需要获取推送权限，需要勾选部署公钥设置里的『授予推送权限』</li></ul><p>登陆 Coding.net 的账号：</p><ol><li>进入个人设置</li><li>选择 SSH 公钥</li><li>选择新增公钥</li><li>填写公钥名称和内容</li><li>添加后输入输入账号密码进行确认</li></ol><h3 id="验证-SSH-连接"><a href="#验证-SSH-连接" class="headerlink" title="验证 SSH 连接"></a>验证 SSH 连接</h3><p>使用 Git Bash 输入：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>第一次连接时会问你是否继续连接，输入 yes 即可；接下来验证 Coding.net 的ssh连接：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@git<span class="selector-class">.coding</span>.net</span><br></pre></td></tr></table></figure><p>同样输入 yes 即可。</p><p>如果按照前边说的来配置，这里的 SSH 验证应该都是没问题的。</p><p>接下来只要撰写博文，然后按照接下来的讲解进行部署就行了。</p><h2 id="向github和coding部署"><a href="#向github和coding部署" class="headerlink" title="向github和coding部署"></a>向github和coding部署</h2><h3 id="push插件安装（必要）"><a href="#push插件安装（必要）" class="headerlink" title="push插件安装（必要）"></a>push插件安装（必要）</h3><p>在部署之前，首先安装一个hexo往git上push的插件，不安装的话没办法上传，安装<code>git</code>插件：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>想要同时部署到2个平台，就要修改博客根目录下面的<code>_config.yml</code>文件，根据Hexo官方文档需要修改成下面的形式：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  message: [message]</span><br><span class="line">  repo:</span><br><span class="line">    github: &lt;repository url&gt;,[branch]</span><br><span class="line">    gitcafe: &lt;repository url&gt;,[branch] </span><br></pre></td></tr></table></figure><p>在文件中<code>ctrf+f</code>搜索<code>deploy</code>即可找到。</p><p>参数<code>type</code>为提交类型，我们现在用的就是<code>git</code>，所以不用修改。</p><p>参数<code>message</code>是一个说明，可以不加。</p><p>参数<code>repo</code>为提交的地址，可以设为https或ssh形式，在这里我们用的是ssh进行上传的，所以需要去各自的代码仓库找到ssh链接。</p><p>github仓库：<br><img src= "/img/loading.gif" data-lazy-src="add/4.png" alt="enter description here"></p><p>coding仓库：</p><p><img src= "/img/loading.gif" data-lazy-src="add/coding7.png"></p><p>第一次点开默认是https的链接，点击右上角<code>Use SSH</code>后再才会转为SSH的链接，我们将其复制下来。</p><p>我的配置文件修改是这样的：</p><p><img src= "/img/loading.gif" data-lazy-src="add/5.png" alt="enter description here"></p><p>其中我增加了gitee的链接，你们如果没有创建gitee的话可以删掉那行。<br>参数<code>branch</code>是分支的意思，如果你们的网站部署在了其他分支上，将<code>branch</code>后的<code>master</code>改为你们所设定的分支名即可。</p><p>我这边提交采用的SSH密钥，这个方法有个好处，提交的时候不用输入用户名和密码。如果你习惯用http的方式，只要将地址改成相应的http地址即可。</p><h3 id="部署至github和coding"><a href="#部署至github和coding" class="headerlink" title="部署至github和coding"></a>部署至github和coding</h3><p>将配置文件修改好之后开始就可以向代码仓库上传了，我们只需要使用 <code>Git Bash</code>在博客的根目录输入命令<code>hexo d</code>即可，完整命令是<code>hexo deploy</code>。</p><p>由于使用的是SSH进行push，所以期间不用输账号密码，推送完毕后访问网址即可进行查看我们的静态博客了。</p>]]></content>
      
      
      <categories>
          
          <category> 网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
